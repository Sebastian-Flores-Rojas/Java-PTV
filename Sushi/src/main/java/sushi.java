import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

public class sushi extends javax.swing.JFrame {

    /**
     * Creates new form sushi
     */
    public sushi() {
        initComponents();
        llenarTabla();
        llenarComboBoxSushi((String)cbTipoSushi.getSelectedItem());
        
        cbIdSushi.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnVolver = new javax.swing.JButton();
        txtNombreSushi = new javax.swing.JTextField();
        txtPrecio = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cbSushi = new javax.swing.JComboBox<>();
        cbIdSushi = new javax.swing.JComboBox<>();
        btnGuardarSushi = new javax.swing.JButton();
        btnAgregarIngredientes = new javax.swing.JButton();
        btnEliminarSushi = new javax.swing.JButton();
        btnActualizarSushi = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableSushi = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        cbTipo = new javax.swing.JComboBox<>();
        cbTipoSushi = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnVolver.setFont(new java.awt.Font("Lucida Bright", 0, 18)); // NOI18N
        btnVolver.setText("<= Volver");
        btnVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVolverActionPerformed(evt);
            }
        });

        txtNombreSushi.setFont(new java.awt.Font("Lucida Bright", 0, 14)); // NOI18N
        txtNombreSushi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNombreSushiActionPerformed(evt);
            }
        });

        txtPrecio.setFont(new java.awt.Font("Lucida Bright", 0, 14)); // NOI18N
        txtPrecio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPrecioActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Lucida Bright", 0, 18)); // NOI18N
        jLabel1.setText("Nombre :");

        jLabel2.setFont(new java.awt.Font("Lucida Bright", 0, 18)); // NOI18N
        jLabel2.setText("Precio :");

        cbSushi.setFont(new java.awt.Font("Lucida Bright", 0, 18)); // NOI18N
        cbSushi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbSushiActionPerformed(evt);
            }
        });

        cbIdSushi.setFont(new java.awt.Font("Harlow Solid Italic", 0, 18)); // NOI18N
        cbIdSushi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbIdSushiActionPerformed(evt);
            }
        });

        btnGuardarSushi.setFont(new java.awt.Font("Lucida Bright", 0, 18)); // NOI18N
        btnGuardarSushi.setText("Agregar");
        btnGuardarSushi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarSushiActionPerformed(evt);
            }
        });

        btnAgregarIngredientes.setFont(new java.awt.Font("Lucida Bright", 0, 18)); // NOI18N
        btnAgregarIngredientes.setText("Agregar");
        btnAgregarIngredientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarIngredientesActionPerformed(evt);
            }
        });

        btnEliminarSushi.setFont(new java.awt.Font("Lucida Bright", 0, 18)); // NOI18N
        btnEliminarSushi.setText("Eliminar");
        btnEliminarSushi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarSushiActionPerformed(evt);
            }
        });

        btnActualizarSushi.setFont(new java.awt.Font("Lucida Bright", 0, 18)); // NOI18N
        btnActualizarSushi.setText("Actualizar");
        btnActualizarSushi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarSushiActionPerformed(evt);
            }
        });

        tableSushi.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tableSushi.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nombre", "Precio"
            }
        ));
        tableSushi.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableSushiMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableSushi);

        jLabel3.setFont(new java.awt.Font("Lucida Bright", 0, 18)); // NOI18N
        jLabel3.setText("Tipo :");

        cbTipo.setFont(new java.awt.Font("Lucida Bright", 0, 18)); // NOI18N
        cbTipo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Especial Rolls", "Veggie Rolls", "Hot Rolls", "Rolls sin Arroz" }));
        cbTipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbTipoActionPerformed(evt);
            }
        });

        cbTipoSushi.setFont(new java.awt.Font("Lucida Bright", 0, 18)); // NOI18N
        cbTipoSushi.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Especial Rolls", "Veggie Rolls", "Hot Rolls", "Rolls sin Arroz" }));
        cbTipoSushi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbTipoSushiActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtNombreSushi, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtPrecio)
                                    .addComponent(cbTipo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(18, 18, 18)
                        .addComponent(cbIdSushi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnActualizarSushi, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnEliminarSushi, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnGuardarSushi, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnVolver)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 460, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(cbTipoSushi, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cbSushi, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnAgregarIngredientes, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(btnVolver)
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(btnGuardarSushi))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(42, 42, 42)
                                .addComponent(btnEliminarSushi)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnActualizarSushi))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(42, 42, 42)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2)
                                    .addComponent(txtPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtNombreSushi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel1)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(cbTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbIdSushi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbTipoSushi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbSushi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAgregarIngredientes))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtNombreSushiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNombreSushiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNombreSushiActionPerformed

    private void txtPrecioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPrecioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPrecioActionPerformed

    private void btnActualizarSushiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarSushiActionPerformed
        Conexion cc = new Conexion();
        Connection cn = cc.conectar();
        
        String nombre, tipo, tipoSushi;
        int precio;
        
        nombre = txtNombreSushi.getText();
        tipo = (String)cbTipo.getSelectedItem();
        precio = Integer.parseInt(txtPrecio.getText());
        
        tipoSushi = (String)cbTipoSushi.getSelectedItem();
        
        try
        {
            PreparedStatement pst = cn.prepareStatement("UPDATE sushi SET precio = ?, tipo = ? WHERE nombre = ?");
            pst.setInt(1, precio);
            pst.setString(2, tipo);
            pst.setString(3, nombre);
            pst.executeUpdate();
            limpiar();
            llenarTabla();
            llenarComboBoxSushi(tipoSushi);
        }
        catch (SQLException ex)
        {
            System.out.print(ex.getMessage());
        }
    }//GEN-LAST:event_btnActualizarSushiActionPerformed

    private void btnGuardarSushiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarSushiActionPerformed
        Conexion cc = new Conexion();
        Connection cn = cc.conectar();
        
        String nombre, tipo, tipoSushi;
        int precio;
        
        nombre = txtNombreSushi.getText();
        tipo = (String)cbTipo.getSelectedItem();
        precio = Integer.parseInt(txtPrecio.getText());
        
        tipoSushi = (String)cbTipoSushi.getSelectedItem();
        
        try
        {
            PreparedStatement pst = cn.prepareStatement("INSERT INTO sushi VALUES (?,?,?,?,?)");
            pst.setString(2, nombre);
            pst.setString(3, tipo);
            pst.setInt(4, precio);
            pst.executeUpdate();
            limpiar();
            llenarTabla();
            llenarComboBoxSushi(tipoSushi);
        }
        catch (SQLException ex)
        {
            System.out.print(ex.getMessage());
        }
    }//GEN-LAST:event_btnGuardarSushiActionPerformed

    private void btnEliminarSushiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarSushiActionPerformed
        Conexion cc = new Conexion();
        Connection cn = cc.conectar();
                        
        try
        {
            int confirmacion = JOptionPane.showConfirmDialog(null, "¿Esta seguro que desea ELIMINAR este sushi?");
            
            if (confirmacion == 0){
                
            PreparedStatement pst = cn.prepareStatement("DELETE FROM sushi WHERE nombre = ?");
                System.out.println(txtNombreSushi.getText());
            pst.setString(1, txtNombreSushi.getText());
            pst.executeUpdate();
            limpiar();
            llenarTabla();
            llenarComboBoxSushi((String)cbTipoSushi.getSelectedItem());
            }
        }
        catch (SQLException ex)
        {
            System.out.print(ex.getMessage());
        }
    }//GEN-LAST:event_btnEliminarSushiActionPerformed

    private void btnAgregarIngredientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarIngredientesActionPerformed
        String id = (String)cbIdSushi.getSelectedItem();        
        sushi_ingredientes sushi_ingredientes = new sushi_ingredientes(id);
        sushi_ingredientes.setLocationRelativeTo(null);
        sushi_ingredientes.setResizable(true);
        sushi_ingredientes.setVisible(true);
        dispose();
        
        /*Conexion cc = new Conexion();
        Connection cn = cc.conectar();
        
        String nombre, stock, sushi, numero;
        int id_stock, id_sushi, cantidad;
        nombre = (String)cbStock.getSelectedItem();
        stock = (String)cbIdStock.getSelectedItem();
        id_stock = Integer.parseInt(stock);
        sushi = (String)cbIdSushi.getSelectedItem();
        id_sushi = Integer.parseInt(sushi);
        cantidad = Integer.parseInt(txtCantidad.getText());
        
        try
        {
            PreparedStatement pst = cn.prepareStatement("INSERT INTO sushi_ingredientes VALUES (?,?,?,?,?)");
            pst.setInt(2, id_stock);
            pst.setInt(3, id_sushi);
            pst.setString(4, nombre);
            pst.setInt(5, cantidad);
            pst.executeUpdate();
            limpiar();
            llenarTableStock(id_sushi);
        }
        catch (SQLException ex)
        {
            System.out.print(ex.getMessage());
        }*/
    }//GEN-LAST:event_btnAgregarIngredientesActionPerformed

    private void cbSushiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbSushiActionPerformed
        if(cbSushi.getSelectedIndex() > -1){
            cbIdSushi.setSelectedIndex(cbSushi.getSelectedIndex());
            //tableStock.removeAll();
            //String num = (String)cbIdSushi.getSelectedItem();
            //int id = Integer.parseInt(num);
            //llenarTableStock(id);
        }else{
            cbSushi.removeAll();
        }
    }//GEN-LAST:event_cbSushiActionPerformed

    private void btnVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVolverActionPerformed
        inicio_creacion inicio_creacion = new inicio_creacion();
        inicio_creacion.setVisible(true);
        dispose();
    }//GEN-LAST:event_btnVolverActionPerformed

    private void cbIdSushiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbIdSushiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbIdSushiActionPerformed

    private void tableSushiMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableSushiMouseClicked
        int  fila = tableSushi.getSelectedRow();
        txtNombreSushi.setText((String) tableSushi.getValueAt(fila, 0));
        txtPrecio.setText((String) tableSushi.getValueAt(fila, 2));
    }//GEN-LAST:event_tableSushiMouseClicked

    private void cbTipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbTipoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbTipoActionPerformed

    private void cbTipoSushiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbTipoSushiActionPerformed
        if(cbTipoSushi.getSelectedIndex() > -1){
            llenarComboBoxSushi((String)cbTipoSushi.getSelectedItem());
        }else{
            cbTipoSushi.removeAll();
        }
    }//GEN-LAST:event_cbTipoSushiActionPerformed

    public void limpiar(){
    txtNombreSushi.setText("");
    txtPrecio.setText("");
    txtNombreSushi.requestFocus();
    }
    
    public void llenarTabla(){
        
        DefaultTableModel modelo = new DefaultTableModel();
        
        //modelo.addColumn("ID");
        modelo.addColumn("Nombre");
        modelo.addColumn("Tipo");
        modelo.addColumn("Precio");
        
        String [] fila = new String[3];

        Conexion cc = new Conexion();
        Connection cn = cc.conectar();
        
        try
        {
            Statement st = cn.createStatement();
            ResultSet sushi = st.executeQuery("SELECT * FROM sushi");
                        
            while(sushi.next()){
                //System.out.println(stock.getString(2) + " " + stock.getString(3) + " " + stock.getString(4));
                //fila[1] = stock.getString(3) + " " + stock.getString(4);
                fila[0] = sushi.getString(2);
                fila[1] = sushi.getString(3);
                fila[2] = sushi.getString(4);
                modelo.addRow(fila);
            }
            
            tableSushi.setModel(modelo);
        }
        catch (SQLException ex)
        {
            System.out.print(ex.getMessage());
        }
    }
    
    public void llenarComboBoxSushi(String tipo){
        
        cbSushi.removeAllItems();
        cbIdSushi.removeAllItems();
        DefaultComboBoxModel modeloSushi = new DefaultComboBoxModel();
        DefaultComboBoxModel modeloId = new DefaultComboBoxModel();
        Conexion cc = new Conexion();
        Connection cn = cc.conectar();
        
        try
        {
            Statement st = cn.createStatement();
            ResultSet sushi = st.executeQuery("SELECT * FROM sushi WHERE tipo = '" + tipo + "'");
            
            while(sushi.next()){
                modeloSushi.addElement(sushi.getString(2));
                modeloId.addElement(sushi.getString(1));
            }
        }
        catch (SQLException ex)
        {
            System.out.print(ex.getMessage());
        }
        cbSushi.setModel(modeloSushi);
        cbIdSushi.setModel(modeloId);
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(sushi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(sushi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(sushi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(sushi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizarSushi;
    private javax.swing.JButton btnAgregarIngredientes;
    private javax.swing.JButton btnEliminarSushi;
    private javax.swing.JButton btnGuardarSushi;
    private javax.swing.JButton btnVolver;
    public static javax.swing.JComboBox<String> cbIdSushi;
    private javax.swing.JComboBox<String> cbSushi;
    public static javax.swing.JComboBox<String> cbTipo;
    private javax.swing.JComboBox<String> cbTipoSushi;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableSushi;
    private javax.swing.JTextField txtNombreSushi;
    private javax.swing.JTextField txtPrecio;
    // End of variables declaration//GEN-END:variables
}
