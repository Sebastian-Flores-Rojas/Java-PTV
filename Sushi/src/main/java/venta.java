
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JRootPane;
import javax.swing.table.DefaultTableModel;

import javax.print.Doc;
import javax.print.DocFlavor;
import javax.print.DocPrintJob;
import javax.print.PrintException;
import javax.print.PrintService;
import javax.print.PrintServiceLookup;
import javax.print.SimpleDoc;


public class venta extends javax.swing.JFrame {

    /**
     * Creates new form venta
     */
    public venta() {
        initComponents();
        txtPrecioEnvio.setText("0");
        txtPrecioEspecial.setText("0");
        limpiar();
        llenarFolio();
        int folio = Integer.parseInt(txtFolio.getText());
        precioFinalMenu(folio);
        precioFinalSushi(folio);
        precioFinalSalsa(folio);
        precioFinalAcompañamiento(folio);
        precioFinalPlato(folio);
        precioFinalSashimi(folio);
        precioFinalBebida(folio);
        precioFinalVenta();
        
        txtPrecioMenu.setEditable(false);
        txtPrecioMenu.setEnabled(true);
        txtPrecioSushi.setEditable(false);
        txtPrecioSushi.setEnabled(true);
        txtPrecioSalsa.setEditable(false);
        txtPrecioSalsa.setEnabled(true);
        txtPrecioAcompañamiento.setEditable(false);
        txtPrecioAcompañamiento.setEnabled(true);
        txtPrecioPlato.setEditable(false);
        txtPrecioPlato.setEnabled(true);
        txtPrecioSashimi.setEditable(false);
        txtPrecioSashimi.setEnabled(true);
        txtPrecioFinalVenta.setEditable(false);
        txtPrecioFinalVenta.setEnabled(true);
        txtFolio.setEditable(false);
        txtFolio.setEnabled(true);
        txtPrecioBebida.setEditable(false);
        txtPrecioBebida.setEnabled(true);
        
        btnAgregarBebida1.setVisible(false);
        txtPrecioEspecial.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnVolver = new javax.swing.JButton();
        btnGenerarVenta = new javax.swing.JButton();
        txtFolio = new javax.swing.JTextField();
        txtCliente = new javax.swing.JTextField();
        txtPrecioMenu = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        btnAgregarMenu = new javax.swing.JButton();
        btnAgregarSushi = new javax.swing.JButton();
        btnAgregarSalsa = new javax.swing.JButton();
        txtPrecioSushi = new javax.swing.JTextField();
        txtPrecioSalsa = new javax.swing.JTextField();
        txtPrecioFinalVenta = new javax.swing.JTextField();
        btnAgregarAcompañamiento = new javax.swing.JButton();
        txtPrecioAcompañamiento = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtPrecioEnvio = new javax.swing.JTextField();
        txtPrecioPlato = new javax.swing.JTextField();
        btnAgregarPlato = new javax.swing.JButton();
        btnAgregarSashimi = new javax.swing.JButton();
        txtPrecioSashimi = new javax.swing.JTextField();
        dcFecha = new com.toedter.calendar.JDateChooser();
        btnAgregarBebida = new javax.swing.JButton();
        txtPrecioBebida = new javax.swing.JTextField();
        txtDirrecion = new javax.swing.JTextField();
        txtTelefono = new javax.swing.JTextField();
        txtEntrega = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        btnAgregarBebida1 = new javax.swing.JButton();
        txtPrecioEspecial = new javax.swing.JTextField();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnVolver.setFont(new java.awt.Font("Lucida Bright", 0, 18)); // NOI18N
        btnVolver.setText("<=Volver");
        btnVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVolverActionPerformed(evt);
            }
        });

        btnGenerarVenta.setFont(new java.awt.Font("Lucida Bright", 1, 18)); // NOI18N
        btnGenerarVenta.setText("Gernerar Venta");
        btnGenerarVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerarVentaActionPerformed(evt);
            }
        });

        txtFolio.setFont(new java.awt.Font("Lucida Bright", 0, 18)); // NOI18N

        txtCliente.setFont(new java.awt.Font("Lucida Bright", 0, 18)); // NOI18N

        txtPrecioMenu.setFont(new java.awt.Font("Harlow Solid Italic", 0, 18)); // NOI18N
        txtPrecioMenu.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        jLabel2.setFont(new java.awt.Font("Lucida Bright", 0, 14)); // NOI18N
        jLabel2.setText("Folio :");

        jLabel3.setFont(new java.awt.Font("Lucida Bright", 0, 14)); // NOI18N
        jLabel3.setText("Cliente:");

        jLabel4.setFont(new java.awt.Font("Lucida Bright", 0, 14)); // NOI18N
        jLabel4.setText("Fecha :");

        btnAgregarMenu.setFont(new java.awt.Font("Lucida Bright", 1, 18)); // NOI18N
        btnAgregarMenu.setText("Menu");
        btnAgregarMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarMenuActionPerformed(evt);
            }
        });

        btnAgregarSushi.setFont(new java.awt.Font("Lucida Bright", 1, 18)); // NOI18N
        btnAgregarSushi.setText("Rolls");
        btnAgregarSushi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarSushiActionPerformed(evt);
            }
        });

        btnAgregarSalsa.setFont(new java.awt.Font("Lucida Bright", 1, 18)); // NOI18N
        btnAgregarSalsa.setText("Salsa");
        btnAgregarSalsa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarSalsaActionPerformed(evt);
            }
        });

        txtPrecioSushi.setFont(new java.awt.Font("Harlow Solid Italic", 0, 18)); // NOI18N
        txtPrecioSushi.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        txtPrecioSalsa.setFont(new java.awt.Font("Harlow Solid Italic", 0, 18)); // NOI18N
        txtPrecioSalsa.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        txtPrecioFinalVenta.setFont(new java.awt.Font("Harlow Solid Italic", 0, 18)); // NOI18N
        txtPrecioFinalVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPrecioFinalVentaActionPerformed(evt);
            }
        });

        btnAgregarAcompañamiento.setFont(new java.awt.Font("Lucida Bright", 1, 18)); // NOI18N
        btnAgregarAcompañamiento.setText("Acompañamiento");
        btnAgregarAcompañamiento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarAcompañamientoActionPerformed(evt);
            }
        });

        txtPrecioAcompañamiento.setFont(new java.awt.Font("Harlow Solid Italic", 0, 18)); // NOI18N
        txtPrecioAcompañamiento.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtPrecioAcompañamiento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPrecioAcompañamientoActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Total : $");

        jLabel6.setFont(new java.awt.Font("Lucida Bright", 1, 18)); // NOI18N
        jLabel6.setText("          Envio :");

        txtPrecioEnvio.setFont(new java.awt.Font("Harlow Solid Italic", 0, 18)); // NOI18N
        txtPrecioEnvio.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        txtPrecioPlato.setFont(new java.awt.Font("Harlow Solid Italic", 0, 18)); // NOI18N
        txtPrecioPlato.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        btnAgregarPlato.setFont(new java.awt.Font("Lucida Bright", 1, 18)); // NOI18N
        btnAgregarPlato.setText("Platos");
        btnAgregarPlato.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarPlatoActionPerformed(evt);
            }
        });

        btnAgregarSashimi.setFont(new java.awt.Font("Lucida Bright", 1, 18)); // NOI18N
        btnAgregarSashimi.setText("Sashimi o Tiritos");
        btnAgregarSashimi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarSashimiActionPerformed(evt);
            }
        });

        txtPrecioSashimi.setFont(new java.awt.Font("Harlow Solid Italic", 0, 18)); // NOI18N
        txtPrecioSashimi.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtPrecioSashimi.setToolTipText("");

        dcFecha.setDateFormatString("dd-MM-yyyy");

        btnAgregarBebida.setFont(new java.awt.Font("Lucida Bright", 1, 18)); // NOI18N
        btnAgregarBebida.setText("Bebida");
        btnAgregarBebida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarBebidaActionPerformed(evt);
            }
        });

        txtPrecioBebida.setFont(new java.awt.Font("Harlow Solid Italic", 0, 18)); // NOI18N
        txtPrecioBebida.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtPrecioBebida.setToolTipText("");

        txtDirrecion.setFont(new java.awt.Font("Lucida Bright", 0, 18)); // NOI18N

        txtTelefono.setFont(new java.awt.Font("Lucida Bright", 0, 18)); // NOI18N

        txtEntrega.setFont(new java.awt.Font("Lucida Bright", 0, 18)); // NOI18N

        jLabel7.setFont(new java.awt.Font("Lucida Bright", 0, 14)); // NOI18N
        jLabel7.setText("Telefono:");

        jLabel8.setFont(new java.awt.Font("Lucida Bright", 0, 14)); // NOI18N
        jLabel8.setText("Direccion:");

        jLabel9.setFont(new java.awt.Font("Lucida Bright", 0, 14)); // NOI18N
        jLabel9.setText("Hora entrega:");

        btnAgregarBebida1.setFont(new java.awt.Font("Lucida Bright", 1, 18)); // NOI18N
        btnAgregarBebida1.setText("Rolls Especiales");
        btnAgregarBebida1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarBebida1ActionPerformed(evt);
            }
        });

        txtPrecioEspecial.setFont(new java.awt.Font("Harlow Solid Italic", 0, 18)); // NOI18N
        txtPrecioEspecial.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtPrecioEspecial.setToolTipText("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnVolver)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtDirrecion)
                            .addComponent(txtTelefono, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dcFecha, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                            .addComponent(txtCliente, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtFolio, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtEntrega))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnAgregarSalsa, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnAgregarAcompañamiento, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnAgregarSushi, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnAgregarMenu, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnAgregarSashimi, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnAgregarPlato, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnAgregarBebida, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnAgregarBebida1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtPrecioSushi, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPrecioMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPrecioSalsa, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPrecioAcompañamiento, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPrecioEnvio, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPrecioPlato, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPrecioSashimi, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPrecioBebida, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPrecioEspecial, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32))
            .addGroup(layout.createSequentialGroup()
                .addGap(134, 134, 134)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnGenerarVenta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtPrecioFinalVenta))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnVolver)
                        .addGap(49, 49, 49)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtFolio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4)
                            .addComponent(dcFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtDirrecion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtEntrega, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAgregarMenu)
                            .addComponent(txtPrecioMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAgregarSushi)
                            .addComponent(txtPrecioSushi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAgregarSalsa)
                            .addComponent(txtPrecioSalsa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAgregarAcompañamiento)
                            .addComponent(txtPrecioAcompañamiento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAgregarPlato)
                            .addComponent(txtPrecioPlato, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAgregarSashimi)
                            .addComponent(txtPrecioSashimi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAgregarBebida)
                            .addComponent(txtPrecioBebida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAgregarBebida1)
                    .addComponent(txtPrecioEspecial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtPrecioEnvio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(58, 58, 58)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPrecioFinalVenta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addComponent(btnGenerarVenta, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVolverActionPerformed
        inicio inicio = new inicio();
        inicio.setVisible(true);
        dispose();
    }//GEN-LAST:event_btnVolverActionPerformed

    private void btnGenerarVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerarVentaActionPerformed
        
        Conexion cc = new Conexion();
        Connection cn = cc.conectar();

        SimpleDateFormat date = new SimpleDateFormat("yyyy-MM-dd");
        
        int precio_total = Integer.parseInt(txtPrecioFinalVenta.getText()) + Integer.parseInt(txtPrecioEnvio.getText());
        
        int costo = 0;
        int ganancia = 0;

        try
        {
            PreparedStatement pst = cn.prepareStatement("INSERT INTO venta VALUES (?,?,?,?,?,?,?,?,?,?,?)");
            pst.setString(2, "No");
            pst.setString(3, txtCliente.getText());
            pst.setString(4, date.format(dcFecha.getDate()));
            pst.setString(5, txtEntrega.getText());
            pst.setString(6, txtDirrecion.getText());
            pst.setString(7, txtTelefono.getText());
            pst.setDouble(8, costo);
            pst.setInt(9, ganancia);
            pst.setInt(10, Integer.parseInt(txtPrecioEnvio.getText()));
            pst.setInt(11, precio_total);
            
            pst.executeUpdate();
            pst.close();
            
            JOptionPane.showMessageDialog(null, "Venta generada Precio Total: $" + precio_total);
        
        boleta_nombre(txtCliente.getText());
        boleta_fecha();
        boleta_entrega(txtEntrega.getText());
        boleta_direccion(txtDirrecion.getText());
        boleta_telefono(txtTelefono.getText());
        
            if(Integer.parseInt(txtPrecioMenu.getText())>0){
            menuStock();
            boleta_menu();
            }
            if(Integer.parseInt(txtPrecioSushi.getText())>0){
            sushiStock();
            boleta_roll();
            }
            if(Integer.parseInt(txtPrecioSalsa.getText())>0){
            salsaStock();
            boleta_salsa();
            }
            if(Integer.parseInt(txtPrecioAcompañamiento.getText())>0){
            acompañamientoStock();
            boleta_acompañamiento();
            }
            if(Integer.parseInt(txtPrecioPlato.getText())>0){
            platoStock();
            boleta_plato();
            }
            if(Integer.parseInt(txtPrecioSashimi.getText())>0){
            sashimiStock();
            boleta_sashimi();
            }
            if(Integer.parseInt(txtPrecioBebida.getText())>0){
            bebidaStock();
            boleta_bebida();
            }
            
        boleta_precio(precio_total);
        
        JOptionPane.showMessageDialog(null, "Sacar copia de boleta");
                
        boleta_nombre(txtCliente.getText());
        boleta_fecha();
        boleta_entrega(txtEntrega.getText());
        boleta_direccion(txtDirrecion.getText());
        boleta_telefono(txtTelefono.getText());
        boleta_menu();
        boleta_roll();
        boleta_salsa();
        boleta_acompañamiento();
        boleta_plato();
        boleta_sashimi();
        boleta_bebida();
        boleta_precio(precio_total);
            
            venta venta = new venta();
            venta.setLocationRelativeTo(null);
            venta.setResizable(false);
            venta.setVisible(true);
            dispose();
        }
        catch (SQLException ex)
        {
            JOptionPane.showMessageDialog(null, "No dejar nombre o fecha vacios");
            System.out.print(ex.getMessage());
        }
                
    }//GEN-LAST:event_btnGenerarVentaActionPerformed

    private void btnAgregarMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarMenuActionPerformed
        String folio = txtFolio.getText();
        venta_menu venta_menu = new venta_menu(folio);
        venta_menu.setLocationRelativeTo(null);
        venta_menu.setResizable(false);
        venta_menu.setVisible(true);
        dispose();
    }//GEN-LAST:event_btnAgregarMenuActionPerformed

    private void btnAgregarSushiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarSushiActionPerformed
        String folio = txtFolio.getText();
        venta_sushi venta_sushi = new venta_sushi(folio);
        venta_sushi.setLocationRelativeTo(null);
        venta_sushi.setResizable(false);
        venta_sushi.setVisible(true);
        dispose();
    }//GEN-LAST:event_btnAgregarSushiActionPerformed

    private void btnAgregarSalsaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarSalsaActionPerformed
        String folio = txtFolio.getText();
        venta_salsa venta_salsa = new venta_salsa(folio);
        venta_salsa.setLocationRelativeTo(null);
        venta_salsa.setResizable(false);
        venta_salsa.setVisible(true);
        dispose();
    }//GEN-LAST:event_btnAgregarSalsaActionPerformed

    private void txtPrecioFinalVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPrecioFinalVentaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPrecioFinalVentaActionPerformed

    private void btnAgregarAcompañamientoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarAcompañamientoActionPerformed
        String folio = txtFolio.getText();
        venta_acompañamiento venta_acompañamiento = new venta_acompañamiento(folio);
        venta_acompañamiento.setLocationRelativeTo(null);
        venta_acompañamiento.setResizable(false);
        venta_acompañamiento.setVisible(true);
        dispose();
    }//GEN-LAST:event_btnAgregarAcompañamientoActionPerformed

    private void btnAgregarPlatoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarPlatoActionPerformed
        String folio = txtFolio.getText();
        venta_plato venta_plato = new venta_plato(folio);
        venta_plato.setLocationRelativeTo(null);
        venta_plato.setResizable(false);
        venta_plato.setVisible(true);
        dispose();
    }//GEN-LAST:event_btnAgregarPlatoActionPerformed

    private void btnAgregarSashimiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarSashimiActionPerformed
        String folio = txtFolio.getText();
        venta_sashimi venta_sashimi = new venta_sashimi(folio);
        venta_sashimi.setLocationRelativeTo(null);
        venta_sashimi.setResizable(false);
        venta_sashimi.setVisible(true);
        dispose();
    }//GEN-LAST:event_btnAgregarSashimiActionPerformed

    private void txtPrecioAcompañamientoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPrecioAcompañamientoActionPerformed
        String folio = txtFolio.getText();
        venta_acompañamiento venta_acompañamiento = new venta_acompañamiento(folio);
        venta_acompañamiento.setLocationRelativeTo(null);
        venta_acompañamiento.setResizable(false);
        venta_acompañamiento.setVisible(true);
        dispose();
    }//GEN-LAST:event_txtPrecioAcompañamientoActionPerformed

    private void btnAgregarBebidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarBebidaActionPerformed
        String folio = txtFolio.getText();
        venta_bebida venta_bebida = new venta_bebida(folio);
        venta_bebida.setLocationRelativeTo(null);
        venta_bebida.setResizable(false);
        venta_bebida.setVisible(true);
        dispose();
    }//GEN-LAST:event_btnAgregarBebidaActionPerformed

    private void btnAgregarBebida1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarBebida1ActionPerformed
        venta_especial venta_especial = new venta_especial();
        venta_especial.setLocationRelativeTo(null);
        venta_especial.setResizable(false);
        venta_especial.setVisible(true);
        dispose();
    }//GEN-LAST:event_btnAgregarBebida1ActionPerformed

    public void llenarFolio(){
    
        Conexion cc = new Conexion();
        Connection cn = cc.conectar();
        
        try
        {
            Statement st = cn.createStatement();
            ResultSet id = st.executeQuery("SELECT * FROM venta ORDER BY id DESC LIMIT 1");
            
            while(id.next()){
                int num = id.getInt(1);
                num = num + 1;
                String folio = Integer.toString(num);
                txtFolio.setText(folio);
            }
        }
        catch (SQLException ex)
        {
            System.out.print(ex.getMessage());
        }
    }
    
    public void limpiar(){
        txtPrecioMenu.setText("");
        txtPrecioSushi.setText("");
        txtPrecioSalsa.setText("");
        txtPrecioAcompañamiento.setText("");
    }
    public void precioFinalMenu(int folio){
        Conexion cc = new Conexion();
        Connection cn = cc.conectar();
        
        try
        {
            Statement st = cn.createStatement();
            ResultSet menu = st.executeQuery("SELECT SUM(precio) FROM venta_menu WHERE id_venta =" + folio);
            
            while(menu.next()){
                int num = menu.getInt(1);
                String precio = Integer.toString(num);
                txtPrecioMenu.setText(precio);
            }
        }
        catch (SQLException ex)
        {
            System.out.print(ex.getMessage());
        }
    }
    
    public void precioFinalSushi(int folio){
        Conexion cc = new Conexion();
        Connection cn = cc.conectar();
        
        try
        {
            Statement st = cn.createStatement();
            ResultSet sushi = st.executeQuery("SELECT SUM(precio) FROM venta_sushi WHERE id_venta =" + folio);
            
            while(sushi.next()){
                int num = sushi.getInt(1);
                String precio = Integer.toString(num);
                txtPrecioSushi.setText(precio);
            }
        }
        catch (SQLException ex)
        {
            System.out.print(ex.getMessage());
        }
    }
    
    public void precioFinalSalsa(int folio){
        Conexion cc = new Conexion();
        Connection cn = cc.conectar();
        
        try
        {
            Statement st = cn.createStatement();
            ResultSet salsa = st.executeQuery("SELECT SUM(precio) FROM venta_salsa WHERE id_venta =" + folio);
            
            while(salsa.next()){
                int num = salsa.getInt(1);
                String precio = Integer.toString(num);
                txtPrecioSalsa.setText(precio);
            }
        }
        catch (SQLException ex)
        {
            System.out.print(ex.getMessage());
        }
    }
    
    
    public void precioFinalAcompañamiento(int folio){
        Conexion cc = new Conexion();
        Connection cn = cc.conectar();
        
        try
        {
            Statement st = cn.createStatement();
            ResultSet acompañamiento = st.executeQuery("SELECT SUM(precio) FROM venta_acompañamiento WHERE id_venta =" + folio);
            
            while(acompañamiento.next()){
                int num = acompañamiento.getInt(1);
                String precio = Integer.toString(num);
                txtPrecioAcompañamiento.setText(precio);
            }
        }
        catch (SQLException ex)
        {
            System.out.print(ex.getMessage());
        }
    }
    
    public void precioFinalPlato(int folio){
        Conexion cc = new Conexion();
        Connection cn = cc.conectar();
        
        try
        {
            Statement st = cn.createStatement();
            ResultSet plato = st.executeQuery("SELECT SUM(precio) FROM venta_plato WHERE id_venta =" + folio);
            
            while(plato.next()){
                int num = plato.getInt(1);
                String precio = Integer.toString(num);
                txtPrecioPlato.setText(precio);
            }
        }
        catch (SQLException ex)
        {
            System.out.print(ex.getMessage());
        }
    }
    
    public void precioFinalSashimi(int folio){
        Conexion cc = new Conexion();
        Connection cn = cc.conectar();
        
        try
        {
            Statement st = cn.createStatement();
            ResultSet sashimi = st.executeQuery("SELECT SUM(precio) FROM venta_sashimi WHERE id_venta =" + folio);
            
            while(sashimi.next()){
                int num = sashimi.getInt(1);
                String precio = Integer.toString(num);
                txtPrecioSashimi.setText(precio);
            }
        }
        catch (SQLException ex)
        {
            System.out.print(ex.getMessage());
        }
    }
    
    public void precioFinalBebida(int folio){
        Conexion cc = new Conexion();
        Connection cn = cc.conectar();
        
        try
        {
            Statement st = cn.createStatement();
            ResultSet bebida = st.executeQuery("SELECT SUM(precio) FROM venta_bebida WHERE id_venta =" + folio);
            
            while(bebida.next()){
                int num = bebida.getInt(1);
                String precio = Integer.toString(num);
                txtPrecioBebida.setText(precio);
            }
        }
        catch (SQLException ex)
        {
            System.out.print(ex.getMessage());
        }
    }
    
    public void precioFinalVenta(){
        int menu, sushi, salsa, acompañamiento, plato, sashimi, total, bebida, especial, envio;
        
        menu = Integer.parseInt(txtPrecioMenu.getText());
        sushi = Integer.parseInt(txtPrecioSushi.getText());
        salsa = Integer.parseInt(txtPrecioSalsa.getText());
        acompañamiento = Integer.parseInt(txtPrecioAcompañamiento.getText());
        plato = Integer.parseInt(txtPrecioPlato.getText());
        sashimi = Integer.parseInt(txtPrecioSashimi.getText());
        bebida = Integer.parseInt(txtPrecioBebida.getText());
        especial = Integer.parseInt(txtPrecioEspecial.getText());
        
        total = menu + sushi + salsa + acompañamiento + plato + sashimi + bebida + especial;
        txtPrecioFinalVenta.setText(Integer.toString(total));
    }

    public void menuStock(){
        menuStockSushi();
        menuStockSalsa();
        menuStockAcompañamiento();
        menuStockPlato();
        menuStockSashimi();
        menuStockBebida();
    }
    
    public void menuStockSushi(){
        
        int folio = Integer.parseInt(txtFolio.getText());
        Conexion cc = new Conexion();
        Connection cn = cc.conectar();
        
        try
        {
            Statement st = cn.createStatement();
            ResultSet menu = st.executeQuery("SELECT id_menu FROM venta_menu WHERE id_venta =" + folio);
                        
            while(menu.next()){

        try
        {
            Statement st2 = cn.createStatement();
            ResultSet sushi = st2.executeQuery("SELECT sushi_ingredientes.id_stock, sushi_ingredientes.cantidad  FROM menu_sushi INNER JOIN sushi_ingredientes ON sushi_ingredientes.id_sushi = menu_sushi.id_sushi WHERE id_menu =" + menu.getInt(1));
                        
            while(sushi.next()){
            
        try
        {
            Statement st3 = cn.createStatement();
            ResultSet sushi2 = st3.executeQuery("SELECT cantidad, precio FROM stock WHERE id =" + sushi.getInt(1));
                        
            while(sushi2.next()){
                
                int cantidad = sushi2.getInt(1)-sushi.getInt(2);
                int id = sushi.getInt(1);
                
        try
        {
            PreparedStatement pst = cn.prepareStatement("UPDATE stock SET cantidad = ? WHERE id = ?");
            pst.setInt(1, cantidad);
            pst.setInt(2, id);
            pst.executeUpdate();
            }
        catch (SQLException e)
        {
            System.out.print(e.getMessage());
        }
        }
            }
        catch (SQLException x)
        {
            System.out.print(x.getMessage());
        }
        }
            }
        catch (SQLException x)
        {
            System.out.print(x.getMessage());
        }
                }
            }
            
        catch (SQLException ex)
        {
            System.out.print(ex.getMessage());
        }
        menuCostoSushi();
    }
    
    public void menuCostoSushi(){
    int folio = Integer.parseInt(txtFolio.getText());
        Conexion cc = new Conexion();
        Connection cn = cc.conectar();
        
        try
        {
            Statement st = cn.createStatement();
            ResultSet menu = st.executeQuery("SELECT id_menu FROM venta_menu WHERE id_venta =" + folio);
                        
            while(menu.next()){

        try
        {
            Statement st2 = cn.createStatement();
            ResultSet sushi = st2.executeQuery("SELECT sushi_ingredientes.id_stock, sushi_ingredientes.cantidad  FROM menu_sushi INNER JOIN sushi_ingredientes ON sushi_ingredientes.id_sushi = menu_sushi.id_sushi WHERE id_menu =" + menu.getInt(1));
                        
            while(sushi.next()){
            
                double sumaCosto = 0;

        try
        {
            Statement st3 = cn.createStatement();
            Statement st4 = cn.createStatement();
            ResultSet sushi2 = st3.executeQuery("SELECT precio FROM stock WHERE id =" + sushi.getInt(1));
            ResultSet costo = st4.executeQuery("SELECT costo, precio_final FROM venta WHERE id =" + Integer.parseInt(txtFolio.getText()));
                        
            while(sushi2.next()){
                
                sumaCosto = sushi2.getDouble(1)*sushi.getDouble(2)+costo.getDouble(1);
                
        try
        {
            PreparedStatement pst = cn.prepareStatement("UPDATE venta SET costo = ? WHERE id = ?");
            pst.setDouble(1, sumaCosto);
            pst.setInt(2, Integer.parseInt(txtFolio.getText()));
            pst.executeUpdate();
            }
        catch (SQLException e)
        {
            System.out.print(e.getMessage());
        }
        }
            }
        catch (SQLException x)
        {
            System.out.print(x.getMessage());
        }
        }
            }
        catch (SQLException x)
        {
            System.out.print(x.getMessage());
        }
                }
            }
            
        catch (SQLException ex)
        {
            System.out.print(ex.getMessage());
        }
    }
     
    public void menuStockSalsa(){
        
        int folio = Integer.parseInt(txtFolio.getText());
        Conexion cc = new Conexion();
        Connection cn = cc.conectar();
        
        try
        {
            Statement st = cn.createStatement();
            ResultSet menu = st.executeQuery("SELECT id_menu FROM venta_menu WHERE id_venta =" + folio);
                        
            while(menu.next()){

        try
        {
            Statement st2 = cn.createStatement();
            ResultSet salsa = st2.executeQuery("SELECT salsa_ingredientes.id_stock, salsa_ingredientes.cantidad  FROM menu_salsa INNER JOIN salsa_ingredientes ON salsa_ingredientes.id_salsa = menu_salsa.id_salsa WHERE id_menu =" + menu.getInt(1));
                        
            while(salsa.next()){
            
                double sumaCosto = 0;

        try
        {
            Statement st3 = cn.createStatement();
            Statement st4 = cn.createStatement();
            ResultSet salsa2 = st3.executeQuery("SELECT cantidad FROM stock WHERE id =" + salsa.getInt(1));
            ResultSet costo = st4.executeQuery("SELECT costo FROM venta WHERE id =" + Integer.parseInt(txtFolio.getText()));
                        
            while(salsa2.next()){
                
                int cantidad = salsa2.getInt(1)-salsa.getInt(2);
                int id = salsa.getInt(1);
                sumaCosto = salsa2.getDouble(2)*salsa.getDouble(2)+costo.getDouble(1);
                
        try
        {
            PreparedStatement pst = cn.prepareStatement("UPDATE stock SET cantidad = ? WHERE id = ?");
            pst.setInt(1, cantidad);
            pst.setInt(2, id);
            pst.executeUpdate();
            }
        catch (SQLException e)
        {
            System.out.print(e.getMessage());
        }
        }
            }
        catch (SQLException x)
        {
            System.out.print(x.getMessage());
        }     
        }
            }
        catch (SQLException x)
        {
            System.out.print(x.getMessage());
        }
                }
            }
            
        catch (SQLException ex)
        {
            System.out.print(ex.getMessage());
        }
        menuCostoSalsa();
    }
    
    public void menuCostoSalsa(){
        int folio = Integer.parseInt(txtFolio.getText());
        Conexion cc = new Conexion();
        Connection cn = cc.conectar();
        
        try
        {
            Statement st = cn.createStatement();
            ResultSet menu = st.executeQuery("SELECT id_menu FROM venta_menu WHERE id_venta =" + folio);
                        
            while(menu.next()){

        try
        {
            Statement st2 = cn.createStatement();
            ResultSet sushi = st2.executeQuery("SELECT salsa_ingredientes.id_stock, salsa_ingredientes.cantidad  FROM menu_salsa INNER JOIN salsa_ingredientes ON salsa_ingredientes.id_salsa = menu_salsa.id_salsa WHERE id_menu =" + menu.getInt(1));
                        
            while(sushi.next()){
            
                double sumaCosto = 0;

        try
        {
            Statement st3 = cn.createStatement();
            Statement st4 = cn.createStatement();
            ResultSet sushi2 = st3.executeQuery("SELECT precio FROM stock WHERE id =" + sushi.getInt(1));
            ResultSet costo = st4.executeQuery("SELECT costo, precio_final FROM venta WHERE id =" + Integer.parseInt(txtFolio.getText()));
                        
            while(sushi2.next()){
                
                sumaCosto = sushi2.getDouble(1)*sushi.getDouble(2)+costo.getDouble(1);
                
        try
        {
            PreparedStatement pst = cn.prepareStatement("UPDATE venta SET costo = ? WHERE id = ?");
            pst.setDouble(1, sumaCosto);
            pst.setInt(2, Integer.parseInt(txtFolio.getText()));
            pst.executeUpdate();
            }
        catch (SQLException e)
        {
            System.out.print(e.getMessage());
        }
        }
            }
        catch (SQLException x)
        {
            System.out.print(x.getMessage());
        }
        }
            }
        catch (SQLException x)
        {
            System.out.print(x.getMessage());
        }
                }
            }
            
        catch (SQLException ex)
        {
            System.out.print(ex.getMessage());
        }
    }
    
    public void menuStockAcompañamiento(){
        
        int folio = Integer.parseInt(txtFolio.getText());
        Conexion cc = new Conexion();
        Connection cn = cc.conectar();
        
        try
        {
            Statement st = cn.createStatement();
            ResultSet menu = st.executeQuery("SELECT id_menu FROM venta_menu WHERE id_venta =" + folio);
                        
            while(menu.next()){

        try
        {
            Statement st2 = cn.createStatement();
            ResultSet acompañamiento = st2.executeQuery("SELECT acompañamiento_ingredientes.id_stock, acompañamiento_ingredientes.cantidad  FROM menu_acompañamiento INNER JOIN acompañamiento_ingredientes ON acompañamiento_ingredientes.id_acompañamiento = menu_acompañamiento.id_acompañamiento WHERE id_menu =" + menu.getInt(1));
                        
            while(acompañamiento.next()){
            
                double sumaCosto = 0;

        try
        {
            Statement st3 = cn.createStatement();
            Statement st4 = cn.createStatement();
            ResultSet acompañamiento2 = st3.executeQuery("SELECT cantidad FROM stock WHERE id =" + acompañamiento.getInt(1));
            ResultSet costo = st4.executeQuery("SELECT costo FROM venta WHERE id =" + Integer.parseInt(txtFolio.getText()));
                        
            while(acompañamiento2.next()){
                
                int cantidad = acompañamiento2.getInt(1)-acompañamiento.getInt(2);
                int id = acompañamiento.getInt(1);
                sumaCosto = acompañamiento2.getDouble(2)*acompañamiento.getDouble(2)+costo.getDouble(1);
                
        try
        {
            PreparedStatement pst = cn.prepareStatement("UPDATE stock SET cantidad = ? WHERE id = ?");
            pst.setInt(1, cantidad);
            pst.setInt(2, id);
            pst.executeUpdate();
            }
        catch (SQLException e)
        {
            System.out.print(e.getMessage());
        }
        }
            }
        catch (SQLException x)
        {
            System.out.print(x.getMessage());
        }
                
        }
            }
        catch (SQLException x)
        {
            System.out.print(x.getMessage());
        }
                }
            }
            
        catch (SQLException ex)
        {
            System.out.print(ex.getMessage());
        }
        menuCostoAcompañamiento();
    }
    
    public void menuCostoAcompañamiento(){
        int folio = Integer.parseInt(txtFolio.getText());
        Conexion cc = new Conexion();
        Connection cn = cc.conectar();
        
        try
        {
            Statement st = cn.createStatement();
            ResultSet menu = st.executeQuery("SELECT id_menu FROM venta_menu WHERE id_venta =" + folio);
                        
            while(menu.next()){

        try
        {
            Statement st2 = cn.createStatement();
            ResultSet sushi = st2.executeQuery("SELECT acompañamiento_ingredientes.id_stock, acompañamiento_ingredientes.cantidad  FROM menu_acompañamiento INNER JOIN acompañamiento_ingredientes ON acompañamiento_ingredientes.id_acompañamiento = menu_acompañamiento.id_acompañamiento WHERE id_menu =" + menu.getInt(1));
                        
            while(sushi.next()){
            
                double sumaCosto = 0;

        try
        {
            Statement st3 = cn.createStatement();
            Statement st4 = cn.createStatement();
            ResultSet sushi2 = st3.executeQuery("SELECT precio FROM stock WHERE id =" + sushi.getInt(1));
            ResultSet costo = st4.executeQuery("SELECT costo, precio_final FROM venta WHERE id =" + Integer.parseInt(txtFolio.getText()));
                        
            while(sushi2.next()){
                
                sumaCosto = sushi2.getDouble(1)*sushi.getDouble(2)+costo.getDouble(1);
                
        try
        {
            PreparedStatement pst = cn.prepareStatement("UPDATE venta SET costo = ? WHERE id = ?");
            pst.setDouble(1, sumaCosto);
            pst.setInt(2, Integer.parseInt(txtFolio.getText()));
            pst.executeUpdate();
            }
        catch (SQLException e)
        {
            System.out.print(e.getMessage());
        }
        }
            }
        catch (SQLException x)
        {
            System.out.print(x.getMessage());
        }
        }
            }
        catch (SQLException x)
        {
            System.out.print(x.getMessage());
        }
                }
            }
            
        catch (SQLException ex)
        {
            System.out.print(ex.getMessage());
        }
    }
    
    public void menuStockPlato(){
        
        int folio = Integer.parseInt(txtFolio.getText());
        Conexion cc = new Conexion();
        Connection cn = cc.conectar();
        
        try
        {
            Statement st = cn.createStatement();
            ResultSet menu = st.executeQuery("SELECT id_menu FROM venta_menu WHERE id_venta =" + folio);
                        
            while(menu.next()){

        try
        {
            Statement st2 = cn.createStatement();
            ResultSet plato = st2.executeQuery("SELECT plato_ingredientes.id_stock, plato_ingredientes.cantidad  FROM menu_plato INNER JOIN plato_ingredientes ON plato_ingredientes.id_plato = menu_plato.id_plato WHERE id_menu =" + menu.getInt(1));
                        
            while(plato.next()){
            
                double sumaCosto = 0;

        try
        {
            Statement st3 = cn.createStatement();
            Statement st4 = cn.createStatement();
            ResultSet plato2 = st3.executeQuery("SELECT cantidad FROM stock WHERE id =" + plato.getInt(1));
            ResultSet costo = st4.executeQuery("SELECT costo FROM venta WHERE id =" + Integer.parseInt(txtFolio.getText()));
                        
            while(plato2.next()){
                
                int cantidad = plato2.getInt(1)-plato.getInt(2);
                int id = plato.getInt(1);
                sumaCosto = plato2.getDouble(2)*plato.getDouble(2)+costo.getDouble(1);
                System.out.println("este es el costo: "+sumaCosto);
                System.out.println("esta es la id: "+Integer.parseInt(txtFolio.getText()));
                
        try
        {
            PreparedStatement pst = cn.prepareStatement("UPDATE stock SET cantidad = ? WHERE id = ?");
            pst.setInt(1, cantidad);
            pst.setInt(2, id);
            pst.executeUpdate();
            }
        catch (SQLException e)
        {
            System.out.print(e.getMessage());
        }
        }
            }
        catch (SQLException x)
        {
            System.out.print(x.getMessage());
        }
                
        }
            }
        catch (SQLException x)
        {
            System.out.print(x.getMessage());
        }
                }
            }
            
        catch (SQLException ex)
        {
            System.out.print(ex.getMessage());
        }
        menuCostoPlato();
    }
    
    public void menuCostoPlato(){
        int folio = Integer.parseInt(txtFolio.getText());
        Conexion cc = new Conexion();
        Connection cn = cc.conectar();
        
        try
        {
            Statement st = cn.createStatement();
            ResultSet menu = st.executeQuery("SELECT id_menu FROM venta_menu WHERE id_venta =" + folio);
                        
            while(menu.next()){

        try
        {
            Statement st2 = cn.createStatement();
            ResultSet sushi = st2.executeQuery("SELECT acompañamiento_ingredientes.id_stock, acompañamiento_ingredientes.cantidad  FROM menu_acompañamiento INNER JOIN acompañamiento_ingredientes ON acompañamiento_ingredientes.id_acompañamiento = menu_acompañamiento.id_acompañamiento WHERE id_menu =" + menu.getInt(1));
                        
            while(sushi.next()){
            
                double sumaCosto = 0;

        try
        {
            Statement st3 = cn.createStatement();
            Statement st4 = cn.createStatement();
            ResultSet sushi2 = st3.executeQuery("SELECT precio FROM stock WHERE id =" + sushi.getInt(1));
            ResultSet costo = st4.executeQuery("SELECT costo, precio_final FROM venta WHERE id =" + Integer.parseInt(txtFolio.getText()));
                        
            while(sushi2.next()){
                
                sumaCosto = sushi2.getDouble(1)*sushi.getDouble(2)+costo.getDouble(1);
                
        try
        {
            PreparedStatement pst = cn.prepareStatement("UPDATE venta SET costo = ? WHERE id = ?");
            pst.setDouble(1, sumaCosto);
            pst.setInt(2, Integer.parseInt(txtFolio.getText()));
            pst.executeUpdate();
            }
        catch (SQLException e)
        {
            System.out.print(e.getMessage());
        }
        }
            }
        catch (SQLException x)
        {
            System.out.print(x.getMessage());
        }
        }
            }
        catch (SQLException x)
        {
            System.out.print(x.getMessage());
        }
                }
            }
            
        catch (SQLException ex)
        {
            System.out.print(ex.getMessage());
        }
    }
    
    public void menuStockSashimi(){
        
        int folio = Integer.parseInt(txtFolio.getText());
        Conexion cc = new Conexion();
        Connection cn = cc.conectar();
        
        try
        {
            Statement st = cn.createStatement();
            ResultSet menu = st.executeQuery("SELECT id_menu FROM venta_menu WHERE id_venta =" + folio);
                        
            while(menu.next()){

        try
        {
            Statement st2 = cn.createStatement();
            ResultSet sashimi = st2.executeQuery("SELECT sashimi_ingredientes.id_stock, sashimi_ingredientes.cantidad  FROM menu_sashimi INNER JOIN sashimi_ingredientes ON sashimi_ingredientes.id_sashimi = menu_sashimi.id_sashimi WHERE id_menu =" + menu.getInt(1));
                        
            while(sashimi.next()){
            
                double sumaCosto = 0;

        try
        {
            Statement st3 = cn.createStatement();
            Statement st4 = cn.createStatement();
            ResultSet sashimi2 = st3.executeQuery("SELECT cantidad FROM stock WHERE id =" + sashimi.getInt(1));
            ResultSet costo = st4.executeQuery("SELECT costo FROM venta WHERE id =" + Integer.parseInt(txtFolio.getText()));
                        
            while(sashimi2.next()){
                
                int cantidad = sashimi2.getInt(1)-sashimi.getInt(2);
                int id = sashimi.getInt(1);
                sumaCosto = sashimi2.getDouble(2)*sashimi.getDouble(2)+costo.getDouble(1);
                
        try
        {
            PreparedStatement pst = cn.prepareStatement("UPDATE stock SET cantidad = ? WHERE id = ?");
            pst.setInt(1, cantidad);
            pst.setInt(2, id);
            pst.executeUpdate();
            }
        catch (SQLException e)
        {
            System.out.print(e.getMessage());
        }
        }
            }
        catch (SQLException x)
        {
            System.out.print(x.getMessage());
        }
                
        }
            }
        catch (SQLException x)
        {
            System.out.print(x.getMessage());
        }
                }
            }
            
        catch (SQLException ex)
        {
            System.out.print(ex.getMessage());
        }
        menuCostoSashimi();
    }
    
    public void menuCostoSashimi(){
        int folio = Integer.parseInt(txtFolio.getText());
        Conexion cc = new Conexion();
        Connection cn = cc.conectar();
        
        try
        {
            Statement st = cn.createStatement();
            ResultSet menu = st.executeQuery("SELECT id_menu FROM venta_menu WHERE id_venta =" + folio);
                        
            while(menu.next()){

        try
        {
            Statement st2 = cn.createStatement();
            ResultSet sushi = st2.executeQuery("SELECT sashimi_ingredientes.id_stock, sashimi_ingredientes.cantidad  FROM menu_sashimi INNER JOIN sashimi_ingredientes ON sashimi_ingredientes.id_sashimi = menu_sashimi.id_sashimi WHERE id_menu =" + menu.getInt(1));
                        
            while(sushi.next()){
            
                double sumaCosto = 0;

        try
        {
            Statement st3 = cn.createStatement();
            Statement st4 = cn.createStatement();
            ResultSet sushi2 = st3.executeQuery("SELECT precio FROM stock WHERE id =" + sushi.getInt(1));
            ResultSet costo = st4.executeQuery("SELECT costo, precio_final FROM venta WHERE id =" + Integer.parseInt(txtFolio.getText()));
                        
            while(sushi2.next()){
                
                sumaCosto = sushi2.getDouble(1)*sushi.getDouble(2)+costo.getDouble(1);
                
        try
        {
            PreparedStatement pst = cn.prepareStatement("UPDATE venta SET costo = ? WHERE id = ?");
            pst.setDouble(1, sumaCosto);
            pst.setInt(2, Integer.parseInt(txtFolio.getText()));
            pst.executeUpdate();
            }
        catch (SQLException e)
        {
            System.out.print(e.getMessage());
        }
        }
            }
        catch (SQLException x)
        {
            System.out.print(x.getMessage());
        }
        }
            }
        catch (SQLException x)
        {
            System.out.print(x.getMessage());
        }
                }
            }
            
        catch (SQLException ex)
        {
            System.out.print(ex.getMessage());
        }
    }
    
    public void menuStockBebida(){
        
        int folio = Integer.parseInt(txtFolio.getText());
        Conexion cc = new Conexion();
        Connection cn = cc.conectar();
        
        try
        {
            Statement st = cn.createStatement();
            ResultSet menu = st.executeQuery("SELECT id_menu FROM venta_menu WHERE id_venta =" + folio);
                        
            while(menu.next()){

        try
        {
            Statement st2 = cn.createStatement();
            ResultSet bebida = st2.executeQuery("SELECT bebida_ingredientes.id_stock, bebida_ingredientes.cantidad  FROM menu_bebida INNER JOIN bebida_ingredientes ON bebida_ingredientes.id_bebida = menu_bebida.id_bebida WHERE id_menu =" + menu.getInt(1));
                        
            while(bebida.next()){
            
                double sumaCosto = 0;

        try
        {
            Statement st3 = cn.createStatement();
            Statement st4 = cn.createStatement();
            ResultSet bebida2 = st3.executeQuery("SELECT cantidad FROM stock WHERE id =" + bebida.getInt(1));
            ResultSet costo = st4.executeQuery("SELECT costo FROM venta WHERE id =" + Integer.parseInt(txtFolio.getText()));
                        
            while(bebida2.next()){
                
                int cantidad = bebida2.getInt(1)-bebida.getInt(2);
                int id = bebida.getInt(1);
                sumaCosto = bebida2.getDouble(2)*bebida.getDouble(2)+costo.getDouble(1);
                
        try
        {
            PreparedStatement pst = cn.prepareStatement("UPDATE stock SET cantidad = ? WHERE id = ?");
            pst.setInt(1, cantidad);
            pst.setInt(2, id);
            pst.executeUpdate();
            }
        catch (SQLException e)
        {
            System.out.print(e.getMessage());
        }
        }
            }
        catch (SQLException x)
        {
            System.out.print(x.getMessage());
        }
                
        }
            }
        catch (SQLException x)
        {
            System.out.print(x.getMessage());
        }
                }
            }
            
        catch (SQLException ex)
        {
            System.out.print(ex.getMessage());
        }
        menuCostoBebida();
    }
    
    public void menuCostoBebida(){
        int folio = Integer.parseInt(txtFolio.getText());
        Conexion cc = new Conexion();
        Connection cn = cc.conectar();
        
        try
        {
            Statement st = cn.createStatement();
            ResultSet menu = st.executeQuery("SELECT id_menu FROM venta_menu WHERE id_venta =" + folio);
                        
            while(menu.next()){

        try
        {
            Statement st2 = cn.createStatement();
            ResultSet sushi = st2.executeQuery("SELECT bebida_ingredientes.id_stock, bebida_ingredientes.cantidad  FROM menu_bebida INNER JOIN bebida_ingredientes ON bebida_ingredientes.id_bebida = menu_bebida.id_bebida WHERE id_menu =" + menu.getInt(1));
                        
            while(sushi.next()){
            
                double sumaCosto = 0;

        try
        {
            Statement st3 = cn.createStatement();
            Statement st4 = cn.createStatement();
            ResultSet sushi2 = st3.executeQuery("SELECT precio FROM stock WHERE id =" + sushi.getInt(1));
            ResultSet costo = st4.executeQuery("SELECT costo, precio_final FROM venta WHERE id =" + Integer.parseInt(txtFolio.getText()));
                        
            while(sushi2.next()){
                
                sumaCosto = sushi2.getDouble(1)*sushi.getDouble(2)+costo.getDouble(1);
                
        try
        {
            PreparedStatement pst = cn.prepareStatement("UPDATE venta SET costo = ? WHERE id = ?");
            pst.setDouble(1, sumaCosto);
            pst.setInt(2, Integer.parseInt(txtFolio.getText()));
            pst.executeUpdate();
            }
        catch (SQLException e)
        {
            System.out.print(e.getMessage());
        }
        }
            }
        catch (SQLException x)
        {
            System.out.print(x.getMessage());
        }
        }
            }
        catch (SQLException x)
        {
            System.out.print(x.getMessage());
        }
                }
            }
            
        catch (SQLException ex)
        {
            System.out.print(ex.getMessage());
        }
    }
    
    public void sushiStock(){
        int folio = Integer.parseInt(txtFolio.getText());
        Conexion cc = new Conexion();
        Connection cn = cc.conectar();
        
        try
        {
            Statement st = cn.createStatement();
            ResultSet sushi = st.executeQuery("SELECT sushi_ingredientes.id_stock, sushi_ingredientes.cantidad FROM venta_sushi INNER JOIN sushi_ingredientes ON sushi_ingredientes.id_sushi = venta_sushi.id_sushi WHERE id_venta =" + folio);

            while(sushi.next()){
                 
        try
        {
            Statement st2 = cn.createStatement();
            ResultSet sushi2 = st2.executeQuery("SELECT cantidad, precio FROM stock WHERE id =" + sushi.getInt(1));
            
            while(sushi2.next()){
                
                Double cantidad = sushi2.getDouble(1)-sushi.getDouble(2);
                int id = sushi.getInt(1);
                
        try
        {
            PreparedStatement pst = cn.prepareStatement("UPDATE stock SET cantidad = ? WHERE id = ?");
            pst.setDouble(1, cantidad);
            pst.setInt(2, id);
            pst.executeUpdate();
            }
        catch (SQLException e)
        {
            System.out.print(e.getMessage());
        }
        }
            }
        catch (SQLException x)
        {
            System.out.print(x.getMessage());
        }
                }
            }
        catch (SQLException ex)
        {
            System.out.print(ex.getMessage());
        }
        sushiCosto();
        //sushiStockSalsa();
    }
    
    public void sushiStockSalsa(){
        
        int folio = Integer.parseInt(txtFolio.getText());
        Conexion cc = new Conexion();
        Connection cn = cc.conectar();
        
        try
        {
            Statement st = cn.createStatement();
            ResultSet sushi = st.executeQuery("SELECT id_sushi FROM venta_sushi WHERE id_venta =" + folio);
                        
            while(sushi.next()){

        try
        {
            Statement st2 = cn.createStatement();
            ResultSet salsa = st2.executeQuery("SELECT salsa_ingredientes.id_stock, salsa_ingredientes.cantidad  FROM sushi_salsas INNER JOIN salsa_ingredientes ON salsa_ingredientes.id_salsa = sushi_salsas.id_salsa WHERE id_sushi =" + sushi.getInt(1));
                        
            while(salsa.next()){
            
                double sumaCosto = 0;
                
        try
        {
            Statement st3 = cn.createStatement();
            Statement st4 = cn.createStatement();
            ResultSet salsa2 = st3.executeQuery("SELECT cantidad FROM stock WHERE id =" + salsa.getInt(1));
            ResultSet costo = st4.executeQuery("SELECT costo FROM venta WHERE id =" + Integer.parseInt(txtFolio.getText()));
                        
            while(salsa2.next()){
                
                int cantidad = salsa2.getInt(1)-salsa.getInt(2);
                int id = salsa.getInt(1);
                sumaCosto = salsa2.getDouble(2)*salsa.getDouble(2)+costo.getDouble(1);
                
        try
        {
            PreparedStatement pst = cn.prepareStatement("UPDATE stock SET cantidad = ? WHERE id = ?");
            pst.setInt(1, cantidad);
            pst.setInt(2, id);
            pst.executeUpdate();
            
            PreparedStatement stp = cn.prepareStatement("UPDATE venta SET costo = ? WHERE id = ?");
            stp.setDouble(1, sumaCosto);
            stp.setInt(2, Integer.parseInt(txtFolio.getText()));
            stp.executeUpdate();
            }
        catch (SQLException e)
        {
            System.out.print(e.getMessage());
        }
        }
            }
        catch (SQLException x)
        {
            System.out.print(x.getMessage());
        }
                
        }
            }
        catch (SQLException x)
        {
            System.out.print(x.getMessage());
        }
                }
            }
            
        catch (SQLException ex)
        {
            System.out.print(ex.getMessage());
        }
        
        sushiCosto();
    }
    
    public void sushiCosto(){
        int folio = Integer.parseInt(txtFolio.getText());
        Conexion cc = new Conexion();
        Connection cn = cc.conectar();
        
        try
        {
            Statement st = cn.createStatement();
            ResultSet sushi = st.executeQuery("SELECT sushi_ingredientes.id_stock, sushi_ingredientes.cantidad FROM venta_sushi INNER JOIN sushi_ingredientes ON sushi_ingredientes.id_sushi = venta_sushi.id_sushi WHERE id_venta =" + folio);

            while(sushi.next()){
                        
                double sumaCosto;
                 
        try
        {
            Statement st2 = cn.createStatement();
            Statement st3 = cn.createStatement();
            ResultSet sushi2 = st2.executeQuery("SELECT precio FROM stock WHERE id =" + sushi.getInt(1));
            ResultSet costo = st3.executeQuery("SELECT costo, precio_final FROM venta WHERE id =" + Integer.parseInt(txtFolio.getText()));
            
            while(sushi2.next()){
                
                sumaCosto = sushi2.getDouble(1)*sushi.getDouble(2)+costo.getDouble(1);
                
        try
        {
            PreparedStatement stp = cn.prepareStatement("UPDATE venta SET costo = ? WHERE id = ?");
            stp.setDouble(1, sumaCosto);
            stp.setInt(2, Integer.parseInt(txtFolio.getText()));
            stp.executeUpdate();
            }
        catch (SQLException e)
        {
            System.out.print(e.getMessage());
        }
        }
            }
        catch (SQLException x)
        {
            System.out.print(x.getMessage());
        }
                }
            }
        catch (SQLException ex)
        {
            System.out.print(ex.getMessage());
        }
    }
    
    public void salsaStock(){

        int folio = Integer.parseInt(txtFolio.getText());
        Conexion cc = new Conexion();
        Connection cn = cc.conectar();
        
        try
        {
            Statement st = cn.createStatement();
            ResultSet salsa = st.executeQuery("SELECT salsa_ingredientes.id_stock, salsa_ingredientes.cantidad  FROM venta_salsa INNER JOIN salsa_ingredientes ON salsa_ingredientes.id_salsa = venta_salsa.id_salsa WHERE id_venta =" + folio);
                        
            while(salsa.next()){
                
        try
        {
            Statement st2 = cn.createStatement();
            ResultSet salsa2 = st2.executeQuery("SELECT cantidad, precio FROM stock WHERE id =" + salsa.getInt(1));
                        
            while(salsa2.next()){
                
                int cantidad = salsa2.getInt(1)-salsa.getInt(2);
                int id = salsa.getInt(1);
                
        try
        {
            PreparedStatement pst = cn.prepareStatement("UPDATE stock SET cantidad = ? WHERE id = ?");
            pst.setDouble(1, cantidad);
            pst.setInt(2, id);
            pst.executeUpdate();
            }
        catch (SQLException e)
        {
            System.out.print(e.getMessage());
        }
        }
            }
        catch (SQLException x)
        {
            System.out.print(x.getMessage());
        }
                }
            }
            
        catch (SQLException ex)
        {
            System.out.print(ex.getMessage());
        }
        salsaCosto();
    }
    
    public void salsaCosto(){
        int folio = Integer.parseInt(txtFolio.getText());
        Conexion cc = new Conexion();
        Connection cn = cc.conectar();
        
        try
        {
            Statement st = cn.createStatement();
            ResultSet salsa = st.executeQuery("SELECT salsa_ingredientes.id_stock, salsa_ingredientes.cantidad  FROM venta_salsa INNER JOIN salsa_ingredientes ON salsa_ingredientes.id_salsa = venta_salsa.id_salsa WHERE id_venta =" + folio);

            while(salsa.next()){
                        
                double sumaCosto;
                 
        try
        {
            Statement st2 = cn.createStatement();
            Statement st3 = cn.createStatement();
            ResultSet salsa2 = st2.executeQuery("SELECT precio FROM stock WHERE id =" + salsa.getInt(1));
            ResultSet costo = st3.executeQuery("SELECT costo, precio_final FROM venta WHERE id =" + Integer.parseInt(txtFolio.getText()));
            
            while(salsa2.next()){
                
                sumaCosto = salsa2.getDouble(1)*salsa.getDouble(2)+costo.getDouble(1);
                
        try
        {
            PreparedStatement stp = cn.prepareStatement("UPDATE venta SET costo = ? WHERE id = ?");
            stp.setDouble(1, sumaCosto);
            stp.setInt(2, Integer.parseInt(txtFolio.getText()));
            stp.executeUpdate();
            }
        catch (SQLException e)
        {
            System.out.print(e.getMessage());
        }
        }
            }
        catch (SQLException x)
        {
            System.out.print(x.getMessage());
        }
                }
            }
        catch (SQLException ex)
        {
            System.out.print(ex.getMessage());
        }
    }
    
    public void acompañamientoStock(){
        int folio = Integer.parseInt(txtFolio.getText());
        Conexion cc = new Conexion();
        Connection cn = cc.conectar();
        
        try
        {
            Statement st = cn.createStatement();
            ResultSet acompañamiento = st.executeQuery("SELECT acompañamiento_ingredientes.id_stock, acompañamiento_ingredientes.cantidad  FROM venta_acompañamiento INNER JOIN acompañamiento_ingredientes ON acompañamiento_ingredientes.id_acompañamiento = venta_acompañamiento.id_acompañamiento WHERE id_venta =" + folio);
                        
            while(acompañamiento.next()){
                
        try
        {
            Statement st2 = cn.createStatement();
            ResultSet acompañamiento2 = st2.executeQuery("SELECT cantidad, precio FROM stock WHERE id =" + acompañamiento.getInt(1));
                        
            while(acompañamiento2.next()){
                
                int cantidad = acompañamiento2.getInt(1)-acompañamiento.getInt(2);
                int id = acompañamiento.getInt(1);
                
        try
        {
            PreparedStatement pst = cn.prepareStatement("UPDATE stock SET cantidad = ? WHERE id = ?");
            pst.setInt(1, cantidad);
            pst.setInt(2, id);
            pst.executeUpdate();
            }
        catch (SQLException e)
        {
            System.out.print(e.getMessage());
        }
        }
            }
        catch (SQLException x)
        {
            System.out.print(x.getMessage());
        }
                }
            }
            
        catch (SQLException ex)
        {
            System.out.print(ex.getMessage());
        }
        acompañamientoCosto();
    }
    
    public void acompañamientoStockSalsa(){
        
        Conexion cc = new Conexion();
        Connection cn = cc.conectar();
        
        try
        {
            Statement st = cn.createStatement();
            ResultSet acompañamiento = st.executeQuery("SELECT id_acompañamiento FROM venta_acompañamiento WHERE id_venta =" + Integer.parseInt(txtFolio.getText()));
                        
            while(acompañamiento.next()){

        try
        {
            Statement st2 = cn.createStatement();
            ResultSet salsa = st2.executeQuery("SELECT salsa_ingredientes.id_stock, salsa_ingredientes.cantidad  FROM acompañamiento_salsas INNER JOIN salsa_ingredientes ON salsa_ingredientes.id_salsa = acompañamiento_salsas.id_salsa WHERE id_acompañamiento =" + acompañamiento.getInt(1));
                        
            while(salsa.next()){
            
                double sumaCosto = 0;
                
        try
        {
            Statement st3 = cn.createStatement();
            Statement st4 = cn.createStatement();
            ResultSet salsa2 = st3.executeQuery("SELECT cantidad FROM stock WHERE id =" + salsa.getInt(1));
            ResultSet costo = st4.executeQuery("SELECT costo FROM venta WHERE id =" + Integer.parseInt(txtFolio.getText()));
                        
            while(salsa2.next()){
                
                int cantidad = salsa2.getInt(1)-salsa.getInt(2);
                int id = salsa.getInt(1);
                sumaCosto = salsa2.getDouble(2)*salsa.getDouble(2)+costo.getDouble(1);
                
        try
        {
            PreparedStatement pst = cn.prepareStatement("UPDATE stock SET cantidad = ? WHERE id = ?");
            pst.setInt(1, cantidad);
            pst.setInt(2, id);
            pst.executeUpdate();
            
            PreparedStatement stp = cn.prepareStatement("UPDATE venta SET costo = ? WHERE id = ?");
            stp.setDouble(1, sumaCosto);
            stp.setInt(2, Integer.parseInt(txtFolio.getText()));
            stp.executeUpdate();
            }
        catch (SQLException e)
        {
            System.out.print(e.getMessage());
        }
        }
            }
        catch (SQLException x)
        {
            System.out.print(x.getMessage());
        }
                
        }
            }
        catch (SQLException x)
        {
            System.out.print(x.getMessage());
        }
                }
            }
            
        catch (SQLException ex)
        {
            System.out.print(ex.getMessage());
        }
        
        sushiCosto();
    }
    
    public void acompañamientoCosto(){
        int folio = Integer.parseInt(txtFolio.getText());
        Conexion cc = new Conexion();
        Connection cn = cc.conectar();
        
        try
        {
            Statement st = cn.createStatement();
            ResultSet acompañamiento = st.executeQuery("SELECT acompañamiento_ingredientes.id_stock, acompañamiento_ingredientes.cantidad  FROM venta_acompañamiento INNER JOIN acompañamiento_ingredientes ON acompañamiento_ingredientes.id_acompañamiento = venta_acompañamiento.id_acompañamiento WHERE id_venta =" + folio);

            while(acompañamiento.next()){
                        
                double sumaCosto;
                 
        try
        {
            Statement st2 = cn.createStatement();
            Statement st3 = cn.createStatement();
            ResultSet acompañamiento2 = st2.executeQuery("SELECT precio FROM stock WHERE id =" + acompañamiento.getInt(1));
            ResultSet costo = st3.executeQuery("SELECT costo, precio_final FROM venta WHERE id =" + Integer.parseInt(txtFolio.getText()));
            
            while(acompañamiento2.next()){
                
                sumaCosto = acompañamiento2.getDouble(1)*acompañamiento.getDouble(2)+costo.getDouble(1);
                
        try
        {
            PreparedStatement stp = cn.prepareStatement("UPDATE venta SET costo = ? WHERE id = ?");
            stp.setDouble(1, sumaCosto);
            stp.setInt(2, Integer.parseInt(txtFolio.getText()));
            stp.executeUpdate();
            }
        catch (SQLException e)
        {
            System.out.print(e.getMessage());
        }
        }
            }
        catch (SQLException x)
        {
            System.out.print(x.getMessage());
        }
                }
            }
        catch (SQLException ex)
        {
            System.out.print(ex.getMessage());
        }
    }
    
    public void platoStock(){
        int folio = Integer.parseInt(txtFolio.getText());
        Conexion cc = new Conexion();
        Connection cn = cc.conectar();
        
        try
        {
            Statement st = cn.createStatement();
            ResultSet plato = st.executeQuery("SELECT plato_ingredientes.id_stock, plato_ingredientes.cantidad  FROM venta_plato INNER JOIN plato_ingredientes ON plato_ingredientes.id_plato = venta_plato.id_plato WHERE id_venta =" + folio);
                        
            while(plato.next()){
                
                double sumaCosto = 0;
                
        try
        {
            Statement st2 = cn.createStatement();
            //Statement st3 = cn.createStatement();
            ResultSet plato2 = st2.executeQuery("SELECT cantidad, precio FROM stock WHERE id =" + plato.getInt(1));
            //ResultSet costo = st3.executeQuery("SELECT costo FROM venta WHERE id =" + Integer.parseInt(txtFolio.getText()));
                        
            while(plato2.next()){
                
                int cantidad = plato2.getInt(1)-plato.getInt(2);
                int id = plato.getInt(1);
                //sumaCosto = plato2.getDouble(2)*plato.getDouble(2)+costo.getDouble(1);
                
        try
        {
            PreparedStatement pst = cn.prepareStatement("UPDATE stock SET cantidad = ? WHERE id = ?");
            pst.setInt(1, cantidad);
            pst.setInt(2, id);
            pst.executeUpdate();
            }
        catch (SQLException e)
        {
            System.out.print(e.getMessage());
        }
        }
            }
        catch (SQLException x)
        {
            System.out.print(x.getMessage());
        }
                }
            }
            
        catch (SQLException ex)
        {
            System.out.print(ex.getMessage());
        }
        platoCosto();
    }
    
    public void platoStockSalsa(){
        
        int folio = Integer.parseInt(txtFolio.getText());
        Conexion cc = new Conexion();
        Connection cn = cc.conectar();
        
        try
        {
            Statement st = cn.createStatement();
            ResultSet sushi = st.executeQuery("SELECT id_sushi FROM venta_sushi WHERE id_venta =" + folio);
                        
            while(sushi.next()){

        try
        {
            Statement st2 = cn.createStatement();
            ResultSet salsa = st2.executeQuery("SELECT salsa_ingredientes.id_stock, salsa_ingredientes.cantidad  FROM sushi_salsas INNER JOIN salsa_ingredientes ON salsa_ingredientes.id_salsa = sushi_salsas.id_salsa WHERE id_sushi =" + sushi.getInt(1));
                        
            while(salsa.next()){
            
                double sumaCosto = 0;
                
        try
        {
            Statement st3 = cn.createStatement();
            Statement st4 = cn.createStatement();
            ResultSet salsa2 = st3.executeQuery("SELECT cantidad FROM stock WHERE id =" + salsa.getInt(1));
            ResultSet costo = st4.executeQuery("SELECT costo FROM venta WHERE id =" + Integer.parseInt(txtFolio.getText()));
                        
            while(salsa2.next()){
                
                int cantidad = salsa2.getInt(1)-salsa.getInt(2);
                int id = salsa.getInt(1);
                sumaCosto = salsa2.getDouble(2)*salsa.getDouble(2)+costo.getDouble(1);
                
        try
        {
            PreparedStatement pst = cn.prepareStatement("UPDATE stock SET cantidad = ? WHERE id = ?");
            pst.setInt(1, cantidad);
            pst.setInt(2, id);
            pst.executeUpdate();
            
            PreparedStatement stp = cn.prepareStatement("UPDATE venta SET costo = ? WHERE id = ?");
            stp.setDouble(1, sumaCosto);
            stp.setInt(2, Integer.parseInt(txtFolio.getText()));
            stp.executeUpdate();
            }
        catch (SQLException e)
        {
            System.out.print(e.getMessage());
        }
        }
            }
        catch (SQLException x)
        {
            System.out.print(x.getMessage());
        }
                
        }
            }
        catch (SQLException x)
        {
            System.out.print(x.getMessage());
        }
                }
            }
            
        catch (SQLException ex)
        {
            System.out.print(ex.getMessage());
        }
        
        sushiCosto();
    }
    
    public void platoCosto(){
        int folio = Integer.parseInt(txtFolio.getText());
        Conexion cc = new Conexion();
        Connection cn = cc.conectar();
        
        try
        {
            Statement st = cn.createStatement();
            ResultSet sushi = st.executeQuery("SELECT plato_ingredientes.id_stock, plato_ingredientes.cantidad FROM venta_plato INNER JOIN plato_ingredientes ON plato_ingredientes.id_plato = venta_plato.id_plato WHERE id_venta =" + folio);

            while(sushi.next()){
                        
                double sumaCosto;
                 
        try
        {
            Statement st2 = cn.createStatement();
            Statement st3 = cn.createStatement();
            ResultSet sushi2 = st2.executeQuery("SELECT precio FROM stock WHERE id =" + sushi.getInt(1));
            ResultSet costo = st3.executeQuery("SELECT costo, precio_final FROM venta WHERE id =" + Integer.parseInt(txtFolio.getText()));
            
            while(sushi2.next()){
                
                sumaCosto = sushi2.getDouble(1)*sushi.getDouble(2)+costo.getDouble(1);
                
        try
        {
            PreparedStatement stp = cn.prepareStatement("UPDATE venta SET costo = ? WHERE id = ?");
            stp.setDouble(1, sumaCosto);
            stp.setInt(2, Integer.parseInt(txtFolio.getText()));
            stp.executeUpdate();
            }
        catch (SQLException e)
        {
            System.out.print(e.getMessage());
        }
        }
            }
        catch (SQLException x)
        {
            System.out.print(x.getMessage());
        }
                }
            }
        catch (SQLException ex)
        {
            System.out.print(ex.getMessage());
        }
    }
    
    public void sashimiStock(){
        int folio = Integer.parseInt(txtFolio.getText());
        Conexion cc = new Conexion();
        Connection cn = cc.conectar();
        
        try
        {
            Statement st = cn.createStatement();
            ResultSet sashimi = st.executeQuery("SELECT sashimi_ingredientes.id_stock, sashimi_ingredientes.cantidad  FROM venta_sashimi INNER JOIN sashimi_ingredientes ON sashimi_ingredientes.id_sashimi = venta_sashimi.id_sashimi WHERE id_venta =" + folio);
                        
            while(sashimi.next()){
                
                double sumaCosto = 0;
                
        try
        {
            Statement st2 = cn.createStatement();
            //Statement st3 = cn.createStatement();
            ResultSet sashimi2 = st2.executeQuery("SELECT cantidad, precio FROM stock WHERE id =" + sashimi.getInt(1));
            //ResultSet costo = st3.executeQuery("SELECT costo FROM venta WHERE id =" + Integer.parseInt(txtFolio.getText()));
                        
            while(sashimi2.next()){
                
                int cantidad = sashimi2.getInt(1)-sashimi.getInt(2);
                int id = sashimi.getInt(1);
                //sumaCosto = sashimi2.getDouble(2)*sashimi.getDouble(2)+costo.getDouble(1);
                
        try
        {
            PreparedStatement pst = cn.prepareStatement("UPDATE stock SET cantidad = ? WHERE id = ?");
            pst.setInt(1, cantidad);
            pst.setInt(2, id);
            pst.executeUpdate();
            
            //PreparedStatement stp = cn.prepareStatement("UPDATE venta SET costo = ? WHERE id = ?");
            //stp.setDouble(1, sumaCosto);
            //stp.setInt(2, Integer.parseInt(txtFolio.getText()));
            //stp.executeUpdate();
            }
        catch (SQLException e)
        {
            System.out.print(e.getMessage());
        }
        }
            }
        catch (SQLException x)
        {
            System.out.print(x.getMessage());
        }
                }
            }
            
        catch (SQLException ex)
        {
            System.out.print(ex.getMessage());
        }
        sashimiCosto();
    }
    
    public void sashimiStockSalsa(){
        
        int folio = Integer.parseInt(txtFolio.getText());
        Conexion cc = new Conexion();
        Connection cn = cc.conectar();
        
        try
        {
            Statement st = cn.createStatement();
            ResultSet sushi = st.executeQuery("SELECT id_sushi FROM venta_sushi WHERE id_venta =" + folio);
                        
            while(sushi.next()){

        try
        {
            Statement st2 = cn.createStatement();
            ResultSet salsa = st2.executeQuery("SELECT salsa_ingredientes.id_stock, salsa_ingredientes.cantidad  FROM sushi_salsas INNER JOIN salsa_ingredientes ON salsa_ingredientes.id_salsa = sushi_salsas.id_salsa WHERE id_sushi =" + sushi.getInt(1));
                        
            while(salsa.next()){
            
                double sumaCosto = 0;
                
        try
        {
            Statement st3 = cn.createStatement();
            Statement st4 = cn.createStatement();
            ResultSet salsa2 = st3.executeQuery("SELECT cantidad FROM stock WHERE id =" + salsa.getInt(1));
            ResultSet costo = st4.executeQuery("SELECT costo FROM venta WHERE id =" + Integer.parseInt(txtFolio.getText()));
                        
            while(salsa2.next()){
                
                int cantidad = salsa2.getInt(1)-salsa.getInt(2);
                int id = salsa.getInt(1);
                sumaCosto = salsa2.getDouble(2)*salsa.getDouble(2)+costo.getDouble(1);
                
        try
        {
            PreparedStatement pst = cn.prepareStatement("UPDATE stock SET cantidad = ? WHERE id = ?");
            pst.setInt(1, cantidad);
            pst.setInt(2, id);
            pst.executeUpdate();
            
            PreparedStatement stp = cn.prepareStatement("UPDATE venta SET costo = ? WHERE id = ?");
            stp.setDouble(1, sumaCosto);
            stp.setInt(2, Integer.parseInt(txtFolio.getText()));
            stp.executeUpdate();
            }
        catch (SQLException e)
        {
            System.out.print(e.getMessage());
        }
        }
            }
        catch (SQLException x)
        {
            System.out.print(x.getMessage());
        }
                
        }
            }
        catch (SQLException x)
        {
            System.out.print(x.getMessage());
        }
                }
            }
            
        catch (SQLException ex)
        {
            System.out.print(ex.getMessage());
        }
        
        sushiCosto();
    }
    
    public void sashimiCosto(){
        int folio = Integer.parseInt(txtFolio.getText());
        Conexion cc = new Conexion();
        Connection cn = cc.conectar();
        
        try
        {
            Statement st = cn.createStatement();
            ResultSet sushi = st.executeQuery("SELECT sashimi_ingredientes.id_stock, sashimi_ingredientes.cantidad FROM venta_sashimi INNER JOIN sashimi_ingredientes ON sashimi_ingredientes.id_sashimi = venta_sashimi.id_sashimi WHERE id_venta =" + folio);

            while(sushi.next()){
                        
                double sumaCosto;
                 
        try
        {
            Statement st2 = cn.createStatement();
            Statement st3 = cn.createStatement();
            ResultSet sushi2 = st2.executeQuery("SELECT precio FROM stock WHERE id =" + sushi.getInt(1));
            ResultSet costo = st3.executeQuery("SELECT costo, precio_final FROM venta WHERE id =" + Integer.parseInt(txtFolio.getText()));
            
            while(sushi2.next()){
                
                sumaCosto = sushi2.getDouble(1)*sushi.getDouble(2)+costo.getDouble(1);
                
        try
        {
            PreparedStatement stp = cn.prepareStatement("UPDATE venta SET costo = ? WHERE id = ?");
            stp.setDouble(1, sumaCosto);
            stp.setInt(2, Integer.parseInt(txtFolio.getText()));
            stp.executeUpdate();
            }
        catch (SQLException e)
        {
            System.out.print(e.getMessage());
        }
        }
            }
        catch (SQLException x)
        {
            System.out.print(x.getMessage());
        }
                }
            }
        catch (SQLException ex)
        {
            System.out.print(ex.getMessage());
        }
    }
    
    public void bebidaStock(){
        int folio = Integer.parseInt(txtFolio.getText());
        Conexion cc = new Conexion();
        Connection cn = cc.conectar();
        
        try
        {
            Statement st = cn.createStatement();
            ResultSet bebida = st.executeQuery("SELECT bebida_ingredientes.id_stock, bebida_ingredientes.cantidad  FROM venta_bebida INNER JOIN bebida_ingredientes ON bebida_ingredientes.id_bebida = venta_bebida.id_bebida WHERE id_venta =" + folio);
                        
            while(bebida.next()){
                
                double sumaCosto = 0;
                
        try
        {
            Statement st2 = cn.createStatement();
            //Statement st3 = cn.createStatement();
            ResultSet bebida2 = st2.executeQuery("SELECT cantidad, precio FROM stock WHERE id =" + bebida.getInt(1));
            //ResultSet costo = st3.executeQuery("SELECT costo FROM venta WHERE id =" + Integer.parseInt(txtFolio.getText()));
                        
            while(bebida2.next()){
                
                int cantidad = bebida2.getInt(1)-bebida.getInt(2);
                int id = bebida.getInt(1);
                //sumaCosto = bebida2.getDouble(2)*bebida.getDouble(2)+costo.getDouble(1);
                
        try
        {
            PreparedStatement pst = cn.prepareStatement("UPDATE stock SET cantidad = ? WHERE id = ?");
            pst.setInt(1, cantidad);
            pst.setInt(2, id);
            pst.executeUpdate();
            
            //PreparedStatement stp = cn.prepareStatement("UPDATE venta SET costo = ? WHERE id = ?");
            //stp.setDouble(1, sumaCosto);
            //stp.setInt(2, Integer.parseInt(txtFolio.getText()));
            //stp.executeUpdate();
            }
        catch (SQLException e)
        {
            System.out.print(e.getMessage());
        }
        }
            }
        catch (SQLException x)
        {
            System.out.print(x.getMessage());
        }
                }
            }
            
        catch (SQLException ex)
        {
            System.out.print(ex.getMessage());
        }
        bebidaCosto();
    }
    
    public void bebidaCosto(){
        int folio = Integer.parseInt(txtFolio.getText());
        Conexion cc = new Conexion();
        Connection cn = cc.conectar();
        
        try
        {
            Statement st = cn.createStatement();
            ResultSet sushi = st.executeQuery("SELECT bebida_ingredientes.id_stock, bebida_ingredientes.cantidad FROM venta_bebida INNER JOIN bebida_ingredientes ON bebida_ingredientes.id_bebida = venta_bebida.id_bebida WHERE id_venta =" + folio);

            while(sushi.next()){
                        
                double sumaCosto;
                 
        try
        {
            Statement st2 = cn.createStatement();
            Statement st3 = cn.createStatement();
            ResultSet sushi2 = st2.executeQuery("SELECT precio FROM stock WHERE id =" + sushi.getInt(1));
            ResultSet costo = st3.executeQuery("SELECT costo, precio_final FROM venta WHERE id =" + Integer.parseInt(txtFolio.getText()));
            
            while(sushi2.next()){
                
                sumaCosto = sushi2.getDouble(1)*sushi.getDouble(2)+costo.getDouble(1);
                
        try
        {
            PreparedStatement stp = cn.prepareStatement("UPDATE venta SET costo = ? WHERE id = ?");
            stp.setDouble(1, sumaCosto);
            stp.setInt(2, Integer.parseInt(txtFolio.getText()));
            stp.executeUpdate();
            }
        catch (SQLException e)
        {
            System.out.print(e.getMessage());
        }
        }
            }
        catch (SQLException x)
        {
            System.out.print(x.getMessage());
        }
                }
            }
        catch (SQLException ex)
        {
            System.out.print(ex.getMessage());
        }
    }
    
    public void boleta_nombre(String cliente){

        String boleta_info = "\nNOMBRE DE CLIENTE: \n " + cliente + "\n";
                System.out.println(boleta_info);
 
		PrintService printService = PrintServiceLookup.lookupDefaultPrintService();
 
		DocFlavor flavor = DocFlavor.BYTE_ARRAY.AUTOSENSE;
		DocPrintJob docPrintJob = printService.createPrintJob();
		Doc doc = new SimpleDoc(boleta_info.getBytes(), flavor, null);
		try {
			docPrintJob.print(doc, null);
		} catch (PrintException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    }
    
    public void boleta_fecha(){
    
        Date fecha = new Date(Calendar.getInstance().getTimeInMillis());
        SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
        String fechaTexto = formatter.format(fecha);
        String boleta_info = "\nFECHA DE GENERACION: \n " + fechaTexto + "\n";
                System.out.println(boleta_info);
 
		PrintService printService = PrintServiceLookup.lookupDefaultPrintService();
 
		DocFlavor flavor = DocFlavor.BYTE_ARRAY.AUTOSENSE;
		DocPrintJob docPrintJob = printService.createPrintJob();
		Doc doc = new SimpleDoc(boleta_info.getBytes(), flavor, null);
		try {
			docPrintJob.print(doc, null);
		} catch (PrintException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    }
    
    public void boleta_entrega(String entrega){
    
        String boleta_info = "\nHORA DE ENTREGA: \n " + entrega + "\n";
                System.out.println(boleta_info);
 
		PrintService printService = PrintServiceLookup.lookupDefaultPrintService();
 
		DocFlavor flavor = DocFlavor.BYTE_ARRAY.AUTOSENSE;
		DocPrintJob docPrintJob = printService.createPrintJob();
		Doc doc = new SimpleDoc(boleta_info.getBytes(), flavor, null);
		try {
			docPrintJob.print(doc, null);
		} catch (PrintException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    }
    
    public void boleta_direccion(String direccion){
    
        String boleta_info = "\nDIRECCION DEL CLIENTE: \n " + direccion + "\n";
                System.out.println(boleta_info);
 
		PrintService printService = PrintServiceLookup.lookupDefaultPrintService();
 
		DocFlavor flavor = DocFlavor.BYTE_ARRAY.AUTOSENSE;
		DocPrintJob docPrintJob = printService.createPrintJob();
		Doc doc = new SimpleDoc(boleta_info.getBytes(), flavor, null);
		try {
			docPrintJob.print(doc, null);
		} catch (PrintException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    }
    
    public void boleta_telefono(String telefono){
    
        String boleta_info = "\nTELEFONO DEL CLIENTE: \n " + telefono + "\n";
                System.out.println(boleta_info);
 
		PrintService printService = PrintServiceLookup.lookupDefaultPrintService();
 
		DocFlavor flavor = DocFlavor.BYTE_ARRAY.AUTOSENSE;
		DocPrintJob docPrintJob = printService.createPrintJob();
		Doc doc = new SimpleDoc(boleta_info.getBytes(), flavor, null);
		try {
			docPrintJob.print(doc, null);
		} catch (PrintException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    }
    
    public void boleta_precio(int precio){
    
        String boleta_info = "\nPRECIO TOTAL: \n $" + precio + "\n" + "\n" + "\n";
                System.out.println(boleta_info);
 
		PrintService printService = PrintServiceLookup.lookupDefaultPrintService();
 
		DocFlavor flavor = DocFlavor.BYTE_ARRAY.AUTOSENSE;
		DocPrintJob docPrintJob = printService.createPrintJob();
		Doc doc = new SimpleDoc(boleta_info.getBytes(), flavor, null);
		try {
			docPrintJob.print(doc, null);
		} catch (PrintException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    }
    
    public void boleta_menu(){

        Conexion cc = new Conexion();
        Connection cn = cc.conectar();
                
        try
        {
            Statement st = cn.createStatement();
            ResultSet menu = st.executeQuery("SELECT menu.nombre FROM venta_menu INNER JOIN menu ON menu.id = venta_menu.id_menu WHERE id_venta =" + Integer.parseInt(txtFolio.getText()));
                     
            if(Integer.parseInt(txtPrecioMenu.getText())>0){
                
                String boleta_info = "MENUS: \n";
                System.out.println(boleta_info);
 
		PrintService printService = PrintServiceLookup.lookupDefaultPrintService();
 
		DocFlavor flavor = DocFlavor.BYTE_ARRAY.AUTOSENSE;
		DocPrintJob docPrintJob = printService.createPrintJob();
		Doc doc = new SimpleDoc(boleta_info.getBytes(), flavor, null);
		try {
			docPrintJob.print(doc, null);
		} catch (PrintException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
                
                while(menu.next()){
  
                String nombre = menu.getString(1);
                nombre = " - " + nombre + "\n";
                System.out.println(nombre);
                
                imprimir_menu(nombre);
                }
        }
            }
            
        catch (SQLException ex)
        {
            System.out.print(ex.getMessage());
        }       
    }
    
    public void imprimir_menu(String nombre){
        
        PrintService printService = PrintServiceLookup.lookupDefaultPrintService();
 
		DocFlavor flavor = DocFlavor.BYTE_ARRAY.AUTOSENSE;
		DocPrintJob docPrintJob = printService.createPrintJob();
		Doc doc = new SimpleDoc(nombre.getBytes(), flavor, null);
		try {
			docPrintJob.print(doc, null);
		} catch (PrintException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    }

    public void boleta_roll(){
        
        Conexion cc = new Conexion();
        Connection cn = cc.conectar();
        
        try
        {
            Statement st = cn.createStatement();
            ResultSet sushi = st.executeQuery("SELECT sushi.nombre FROM venta_sushi INNER JOIN sushi ON sushi.id = venta_sushi.id_sushi WHERE id_venta =" + Integer.parseInt(txtFolio.getText()));
                        
            if(Integer.parseInt(txtPrecioSushi.getText())>0){
                
                String boleta_info = "ROLLS: \n";
                System.out.println(boleta_info);
 
		PrintService printService = PrintServiceLookup.lookupDefaultPrintService();
 
		DocFlavor flavor = DocFlavor.BYTE_ARRAY.AUTOSENSE;
		DocPrintJob docPrintJob = printService.createPrintJob();
		Doc doc = new SimpleDoc(boleta_info.getBytes(), flavor, null);
		try {
			docPrintJob.print(doc, null);
		} catch (PrintException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
                
                while(sushi.next()){
  
                String nombre = sushi.getString(1);
                nombre = " - " + nombre + "\n";
                System.out.println(nombre);
                
                imprimir_sushi(nombre);
                }
        }
            }
            
        catch (SQLException ex)
        {
            System.out.print(ex.getMessage());
        }       
    }
    
    public void imprimir_sushi(String nombre){
        
        PrintService printService = PrintServiceLookup.lookupDefaultPrintService();
 
		DocFlavor flavor = DocFlavor.BYTE_ARRAY.AUTOSENSE;
		DocPrintJob docPrintJob = printService.createPrintJob();
		Doc doc = new SimpleDoc(nombre.getBytes(), flavor, null);
		try {
			docPrintJob.print(doc, null);
		} catch (PrintException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    }
    
    public void boleta_salsa(){

        Conexion cc = new Conexion();
        Connection cn = cc.conectar();
                
        try
        {
            Statement st = cn.createStatement();
            ResultSet salsa = st.executeQuery("SELECT salsa.nombre FROM venta_salsa INNER JOIN salsa ON salsa.id = venta_salsa.id_salsa WHERE id_venta =" + Integer.parseInt(txtFolio.getText()));
                        
            if(Integer.parseInt(txtPrecioSalsa.getText())>0){
                
                String boleta_info = "SALSAS: \n";
                System.out.println(boleta_info);
 
		PrintService printService = PrintServiceLookup.lookupDefaultPrintService();
 
		DocFlavor flavor = DocFlavor.BYTE_ARRAY.AUTOSENSE;
		DocPrintJob docPrintJob = printService.createPrintJob();
		Doc doc = new SimpleDoc(boleta_info.getBytes(), flavor, null);
		try {
			docPrintJob.print(doc, null);
		} catch (PrintException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
                
                while(salsa.next()){
  
                String nombre = salsa.getString(1);
                nombre = " - " + nombre + "\n";
                System.out.println(nombre);
                
                imprimir_salsa(nombre);
                }
        }
            }
            
        catch (SQLException ex)
        {
            System.out.print(ex.getMessage());
        } 
    }
    
    public void imprimir_salsa(String nombre){
        
        PrintService printService = PrintServiceLookup.lookupDefaultPrintService();
 
		DocFlavor flavor = DocFlavor.BYTE_ARRAY.AUTOSENSE;
		DocPrintJob docPrintJob = printService.createPrintJob();
		Doc doc = new SimpleDoc(nombre.getBytes(), flavor, null);
		try {
			docPrintJob.print(doc, null);
		} catch (PrintException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    }
    
    public void boleta_acompañamiento(){
    
        Conexion cc = new Conexion();
        Connection cn = cc.conectar();
        
        try
        {
            Statement st = cn.createStatement();
            ResultSet acompañamiento = st.executeQuery("SELECT acompañamiento.nombre FROM venta_acompañamiento INNER JOIN acompañamiento ON acompañamiento.id = venta_acompañamiento.id_acompañamiento WHERE id_venta =" + Integer.parseInt(txtFolio.getText()));
                        
            if(Integer.parseInt(txtPrecioAcompañamiento.getText())>0){
                
                String boleta_info = "ACOMPAÑAMIENTOS: \n";
                System.out.println(boleta_info);
 
		PrintService printService = PrintServiceLookup.lookupDefaultPrintService();
 
		DocFlavor flavor = DocFlavor.BYTE_ARRAY.AUTOSENSE;
		DocPrintJob docPrintJob = printService.createPrintJob();
		Doc doc = new SimpleDoc(boleta_info.getBytes(), flavor, null);
		try {
			docPrintJob.print(doc, null);
		} catch (PrintException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
                
                while(acompañamiento.next()){
  
                String nombre = acompañamiento.getString(1);
                nombre = " - " + nombre + "\n";
                System.out.println(nombre);
                
                imprimir_acompañamiento(nombre);
                }
        }
            }
            
        catch (SQLException ex)
        {
            System.out.print(ex.getMessage());
        } 
    }
    
    public void imprimir_acompañamiento(String nombre){
        
        PrintService printService = PrintServiceLookup.lookupDefaultPrintService();
 
		DocFlavor flavor = DocFlavor.BYTE_ARRAY.AUTOSENSE;
		DocPrintJob docPrintJob = printService.createPrintJob();
		Doc doc = new SimpleDoc(nombre.getBytes(), flavor, null);
		try {
			docPrintJob.print(doc, null);
		} catch (PrintException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    }
    
    public void boleta_plato(){
    
        Conexion cc = new Conexion();
        Connection cn = cc.conectar();

        try
        {
            Statement st = cn.createStatement();
            ResultSet plato = st.executeQuery("SELECT plato.nombre FROM venta_plato INNER JOIN plato ON plato.id = venta_plato.id_plato WHERE id_venta =" + Integer.parseInt(txtFolio.getText()));
                        
            if(Integer.parseInt(txtPrecioPlato.getText())>0){
                
                String boleta_info = "PLATOS: \n";
                System.out.println(boleta_info);
 
		PrintService printService = PrintServiceLookup.lookupDefaultPrintService();
 
		DocFlavor flavor = DocFlavor.BYTE_ARRAY.AUTOSENSE;
		DocPrintJob docPrintJob = printService.createPrintJob();
		Doc doc = new SimpleDoc(boleta_info.getBytes(), flavor, null);
		try {
			docPrintJob.print(doc, null);
		} catch (PrintException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
                
                while(plato.next()){
  
                String nombre = plato.getString(1);
                nombre = " - " + nombre + "\n";
                System.out.println(nombre);
                
                imprimir_plato(nombre);
                }
        }
            }
            
        catch (SQLException ex)
        {
            System.out.print(ex.getMessage());
        } 
    }
    
    public void imprimir_plato(String nombre){
        
        PrintService printService = PrintServiceLookup.lookupDefaultPrintService();
 
		DocFlavor flavor = DocFlavor.BYTE_ARRAY.AUTOSENSE;
		DocPrintJob docPrintJob = printService.createPrintJob();
		Doc doc = new SimpleDoc(nombre.getBytes(), flavor, null);
		try {
			docPrintJob.print(doc, null);
		} catch (PrintException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    }
    
    public void boleta_sashimi(){
            
        Conexion cc = new Conexion();
        Connection cn = cc.conectar();

        try
        {
            Statement st = cn.createStatement();
            ResultSet sashimi = st.executeQuery("SELECT sashimi.nombre FROM venta_sashimi INNER JOIN sashimi ON sashimi.id = venta_sashimi.id_sashimi WHERE id_venta =" + Integer.parseInt(txtFolio.getText()));
                        
            if(Integer.parseInt(txtPrecioSashimi.getText())>0){
                
                String boleta_info = "SASHIMIS Y TIRADITOS: \n";
                System.out.println(boleta_info);
 
		PrintService printService = PrintServiceLookup.lookupDefaultPrintService();
 
		DocFlavor flavor = DocFlavor.BYTE_ARRAY.AUTOSENSE;
		DocPrintJob docPrintJob = printService.createPrintJob();
		Doc doc = new SimpleDoc(boleta_info.getBytes(), flavor, null);
		try {
			docPrintJob.print(doc, null);
		} catch (PrintException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
                
                while(sashimi.next()){
  
                String nombre = sashimi.getString(1);
                nombre = " - " + nombre + "\n";
                System.out.println(nombre);
                
                imprimir_sashimi(nombre);
                }
        }
            }
            
        catch (SQLException ex)
        {
            System.out.print(ex.getMessage());
        } 
    }
    
    public void imprimir_sashimi(String nombre){
        
        PrintService printService = PrintServiceLookup.lookupDefaultPrintService();
 
		DocFlavor flavor = DocFlavor.BYTE_ARRAY.AUTOSENSE;
		DocPrintJob docPrintJob = printService.createPrintJob();
		Doc doc = new SimpleDoc(nombre.getBytes(), flavor, null);
		try {
			docPrintJob.print(doc, null);
		} catch (PrintException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    }
    
    public void boleta_bebida(){

        Conexion cc = new Conexion();
        Connection cn = cc.conectar();
        
        try
        {
            Statement st = cn.createStatement();
            ResultSet bebida = st.executeQuery("SELECT bebida.nombre FROM venta_bebida INNER JOIN bebida ON bebida.id = venta_bebida.id_bebida WHERE id_venta =" + Integer.parseInt(txtFolio.getText()));
                        
            if(Integer.parseInt(txtPrecioBebida.getText())>0){
                
                String boleta_info = "BEBIDAS: \n";
                System.out.println(boleta_info);
 
		PrintService printService = PrintServiceLookup.lookupDefaultPrintService();
 
		DocFlavor flavor = DocFlavor.BYTE_ARRAY.AUTOSENSE;
		DocPrintJob docPrintJob = printService.createPrintJob();
		Doc doc = new SimpleDoc(boleta_info.getBytes(), flavor, null);
		try {
			docPrintJob.print(doc, null);
		} catch (PrintException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
                
                while(bebida.next()){
  
                String nombre = bebida.getString(1);
                nombre = " - " + nombre + "\n";
                System.out.println(nombre);
                
                imprimir_bebida(nombre);
                }
        }
            }
            
        catch (SQLException ex)
        {
            System.out.print(ex.getMessage());
        }
    }
    
    public void imprimir_bebida(String nombre){
        
        PrintService printService = PrintServiceLookup.lookupDefaultPrintService();
 
		DocFlavor flavor = DocFlavor.BYTE_ARRAY.AUTOSENSE;
		DocPrintJob docPrintJob = printService.createPrintJob();
		Doc doc = new SimpleDoc(nombre.getBytes(), flavor, null);
		try {
			docPrintJob.print(doc, null);
		} catch (PrintException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    }
    
    public static void main(String args[]) {

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new venta().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregarAcompañamiento;
    private javax.swing.JButton btnAgregarBebida;
    private javax.swing.JButton btnAgregarBebida1;
    private javax.swing.JButton btnAgregarMenu;
    private javax.swing.JButton btnAgregarPlato;
    private javax.swing.JButton btnAgregarSalsa;
    private javax.swing.JButton btnAgregarSashimi;
    private javax.swing.JButton btnAgregarSushi;
    private javax.swing.JButton btnGenerarVenta;
    private javax.swing.JButton btnVolver;
    private com.toedter.calendar.JDateChooser dcFecha;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField txtCliente;
    private javax.swing.JTextField txtDirrecion;
    private javax.swing.JTextField txtEntrega;
    private javax.swing.JTextField txtFolio;
    private javax.swing.JTextField txtPrecioAcompañamiento;
    private javax.swing.JTextField txtPrecioBebida;
    private javax.swing.JTextField txtPrecioEnvio;
    private javax.swing.JTextField txtPrecioEspecial;
    private javax.swing.JTextField txtPrecioFinalVenta;
    private javax.swing.JTextField txtPrecioMenu;
    private javax.swing.JTextField txtPrecioPlato;
    private javax.swing.JTextField txtPrecioSalsa;
    private javax.swing.JTextField txtPrecioSashimi;
    private javax.swing.JTextField txtPrecioSushi;
    private javax.swing.JTextField txtTelefono;
    // End of variables declaration//GEN-END:variables
}
